// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: match_api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Api {

  /// <summary>Holder for reflection information generated from match_api.proto</summary>
  public static partial class MatchApiReflection {

    #region Descriptor
    /// <summary>File descriptor for match_api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MatchApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9tYXRjaF9hcGkucHJvdG8SA2FwaRoQYXV0aGVuX2FwaS5wcm90bxoTd2hv",
            "dF9nYW1lX2FwaS5wcm90byLDAQoTUnBjRmluZE1hdGNoUmVxdWVzdBIRCglt",
            "YXJrX3VuaXQYASABKAUSEQoJZ2FtZV9jb2RlGAIgASgJEhUKDXdpdGhfbm9u",
            "X29wZW4YAyABKAgSDgoGY3JlYXRlGAQgASgIEhYKDm1vY2tfY29kZV9jYXJk",
            "GAUgASgFEhEKCXVzZXJfZGF0YRgGIAEoCRIQCghsYXN0X2JldBgHIAEoAxIQ",
            "CghwYXNzd29yZBgIIAEoCRIQCgh0YWJsZV9pZBgJIAEoCSLyAwoFTWF0Y2gS",
            "EAoIbWF0Y2hfaWQYASABKAkSDAoEc2l6ZRgCIAEoBRIQCghtYXhfc2l6ZRgD",
            "IAEoBRIMCgRuYW1lGAQgASgJEhEKCW1hcmtfdW5pdBgFIAEoBRIMCgRvcGVu",
            "GAYgASgIEhYKDm1vY2tfY29kZV9jYXJkGAcgASgFEhEKCXVzZXJfZGF0YRgI",
            "IAEoCRIQCghsYXN0X2JldBgJIAEoAxIiCgx1c2VyX2NyZWF0ZWQYCiABKAsy",
            "DC5hcGkuUHJvZmlsZRIQCgh0YWJsZV9pZBgLIAEoCRIPCgdudW1fYm90GAwg",
            "ASgFEhAKCHBhc3N3b3JkGA0gASgJEiQKCHByb2ZpbGVzGA8gAygLMhIuYXBp",
            "LlNpbXBsZVByb2ZpbGUSFQoDYmV0GBAgASgLMgguYXBpLkJldBIiCgpnYW1l",
            "X3N0YXRlGBEgASgOMg4uYXBpLkdhbWVTdGF0ZRIXCg9wbGF5aW5nX3BsYXll",
            "cnMYEiADKAkSPgoTZ2FtZV9zdGF0ZV9kdXJhdGlvbhgTIAMoCzIhLmFwaS5N",
            "YXRjaC5HYW1lU3RhdGVEdXJhdGlvbkVudHJ5GjgKFkdhbWVTdGF0ZUR1cmF0",
            "aW9uRW50cnkSCwoDa2V5GAEgASgFEg0KBXZhbHVlGAIgASgFOgI4ASJKChBN",
            "YXRjaEluZm9SZXF1ZXN0EhAKCG1hdGNoX2lkGAEgASgJEhIKCnF1ZXJ5X3Vz",
            "ZXIYAiABKAgSEAoIbm9fY2FjaGUYAyABKAgiMwoUUnBjRmluZE1hdGNoUmVz",
            "cG9uc2USGwoHbWF0Y2hlcxgBIAMoCzIKLmFwaS5NYXRjaCKWAQoVUnBjQ3Jl",
            "YXRlTWF0Y2hSZXF1ZXN0EhEKCW1hcmtfdW5pdBgBIAEoBRIRCglnYW1lX2Nv",
            "ZGUYAiABKAkSDAoEbmFtZRgDIAEoCRIQCghwYXNzd29yZBgEIAEoCRIQCghs",
            "YXN0X2JldBgFIAEoAxIQCghtYXhfc2l6ZRgGIAEoAxITCgtjdXN0b21fZGF0",
            "YRgHIAEoCSIqChZScGNDcmVhdGVNYXRjaFJlc3BvbnNlEhAKCG1hdGNoX2lk",
            "GAEgASgJIsoCCgNCZXQSCgoCaWQYASABKAMSDgoGZW5hYmxlGAIgASgIEhEK",
            "CW1hcmtfdW5pdBgDIAEoAhIPCgdnYW1lX2lkGAQgASgDEg4KBnhfam9pbhgF",
            "IAEoAhIPCgdhZ19qb2luGAYgASgDEhIKCnhfcGxheV9ub3cYByABKAISEwoL",
            "YWdfcGxheV9ub3cYCCABKAMSDwoHeF9sZWF2ZRgJIAEoAhIQCghhZ19sZWF2",
            "ZRgKIAEoAxINCgV4X2ZlZRgLIAEoAhIOCgZhZ19mZWUYDCABKAMSDwoHbmV3",
            "X2ZlZRgNIAEoAhIVCg1jb3VudF9wbGF5aW5nGA4gASgDEg8KB21pbl92aXAY",
            "DyABKAMSDwoHbWF4X3ZpcBgQIAEoAxItChBiZXRfZGlzYWJsZV90eXBlGBEg",
            "ASgOMhMuYXBpLkJldERpc2FibGVUeXBlImsKBEJldHMSFgoEYmV0cxgBIAMo",
            "CzIILmFwaS5CZXQSDQoFdG90YWwYAiABKAMSDgoGb2Zmc2V0GAMgASgDEg0K",
            "BWxpbWl0GAQgASgDEh0KC2Jlc3RfY2hvaWNlGAUgASgLMgguYXBpLkJldCI8",
            "CgpCZXRSZXF1ZXN0Eg8KB2dhbWVfaWQYASABKAMSDgoGb2Zmc2V0GAIgASgD",
            "Eg0KBWxpbWl0GAMgASgDKjMKB1JQQ0NvZGUSEgoOUlBDX0ZJTkRfTUFUQ0gQ",
            "ABIUChBSUENfQ1JFQVRFX01BVENIEAEqoAEKDkJldERpc2FibGVUeXBlEiAK",
            "HEJFVF9ESVNBQkxFX1RZUEVfVU5TUEVDSUZJRUQQABIkCiBCRVRfRElTQUJM",
            "RV9UWVBFX05PVF9FTk9VR0hfQ0hJUBABEiIKHkJFVF9ESVNBQkxFX1RZUEVf",
            "QkVMT1dfTUlOX1ZJUBACEiIKHkJFVF9ESVNBQkxFX1RZUEVfQUJPVkVfTUFY",
            "X1ZJUBADQjFaL2dpdGh1Yi5jb20vbmFrYW1hRnJhbWV3b3JrL3dob3QtbW9k",
            "dWxlL2FwaS93aG90YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Api.AuthenApiReflection.Descriptor, global::Api.WhotGameApiReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Api.RPCCode), typeof(global::Api.BetDisableType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.RpcFindMatchRequest), global::Api.RpcFindMatchRequest.Parser, new[]{ "MarkUnit", "GameCode", "WithNonOpen", "Create", "MockCodeCard", "UserData", "LastBet", "Password", "TableId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Match), global::Api.Match.Parser, new[]{ "MatchId", "Size", "MaxSize", "Name", "MarkUnit", "Open", "MockCodeCard", "UserData", "LastBet", "UserCreated", "TableId", "NumBot", "Password", "Profiles", "Bet", "GameState", "PlayingPlayers", "GameStateDuration" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.MatchInfoRequest), global::Api.MatchInfoRequest.Parser, new[]{ "MatchId", "QueryUser", "NoCache" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.RpcFindMatchResponse), global::Api.RpcFindMatchResponse.Parser, new[]{ "Matches" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.RpcCreateMatchRequest), global::Api.RpcCreateMatchRequest.Parser, new[]{ "MarkUnit", "GameCode", "Name", "Password", "LastBet", "MaxSize", "CustomData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.RpcCreateMatchResponse), global::Api.RpcCreateMatchResponse.Parser, new[]{ "MatchId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Bet), global::Api.Bet.Parser, new[]{ "Id", "Enable", "MarkUnit", "GameId", "XJoin", "AgJoin", "XPlayNow", "AgPlayNow", "XLeave", "AgLeave", "XFee", "AgFee", "NewFee", "CountPlaying", "MinVip", "MaxVip", "BetDisableType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.Bets), global::Api.Bets.Parser, new[]{ "Bets_", "Total", "Offset", "Limit", "BestChoice" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Api.BetRequest), global::Api.BetRequest.Parser, new[]{ "GameId", "Offset", "Limit" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// The complete set of rpc used for communication between clients and server.
  /// </summary>
  public enum RPCCode {
    /// <summary>
    /// No opcode specified. Unused.
    /// </summary>
    [pbr::OriginalName("RPC_FIND_MATCH")] RpcFindMatch = 0,
    [pbr::OriginalName("RPC_CREATE_MATCH")] RpcCreateMatch = 1,
  }

  public enum BetDisableType {
    [pbr::OriginalName("BET_DISABLE_TYPE_UNSPECIFIED")] Unspecified = 0,
    [pbr::OriginalName("BET_DISABLE_TYPE_NOT_ENOUGH_CHIP")] NotEnoughChip = 1,
    [pbr::OriginalName("BET_DISABLE_TYPE_BELOW_MIN_VIP")] BelowMinVip = 2,
    [pbr::OriginalName("BET_DISABLE_TYPE_ABOVE_MAX_VIP")] AboveMaxVip = 3,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Payload for an RPC request to find a match.
  /// </summary>
  public sealed partial class RpcFindMatchRequest : pb::IMessage<RpcFindMatchRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcFindMatchRequest> _parser = new pb::MessageParser<RpcFindMatchRequest>(() => new RpcFindMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcFindMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MatchApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcFindMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcFindMatchRequest(RpcFindMatchRequest other) : this() {
      markUnit_ = other.markUnit_;
      gameCode_ = other.gameCode_;
      withNonOpen_ = other.withNonOpen_;
      create_ = other.create_;
      mockCodeCard_ = other.mockCodeCard_;
      userData_ = other.userData_;
      lastBet_ = other.lastBet_;
      password_ = other.password_;
      tableId_ = other.tableId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcFindMatchRequest Clone() {
      return new RpcFindMatchRequest(this);
    }

    /// <summary>Field number for the "mark_unit" field.</summary>
    public const int MarkUnitFieldNumber = 1;
    private int markUnit_;
    /// <summary>
    /// User can choose a fast or normal speed match.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarkUnit {
      get { return markUnit_; }
      set {
        markUnit_ = value;
      }
    }

    /// <summary>Field number for the "game_code" field.</summary>
    public const int GameCodeFieldNumber = 2;
    private string gameCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameCode {
      get { return gameCode_; }
      set {
        gameCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "with_non_open" field.</summary>
    public const int WithNonOpenFieldNumber = 3;
    private bool withNonOpen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool WithNonOpen {
      get { return withNonOpen_; }
      set {
        withNonOpen_ = value;
      }
    }

    /// <summary>Field number for the "create" field.</summary>
    public const int CreateFieldNumber = 4;
    private bool create_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Create {
      get { return create_; }
      set {
        create_ = value;
      }
    }

    /// <summary>Field number for the "mock_code_card" field.</summary>
    public const int MockCodeCardFieldNumber = 5;
    private int mockCodeCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MockCodeCard {
      get { return mockCodeCard_; }
      set {
        mockCodeCard_ = value;
      }
    }

    /// <summary>Field number for the "user_data" field.</summary>
    public const int UserDataFieldNumber = 6;
    private string userData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserData {
      get { return userData_; }
      set {
        userData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_bet" field.</summary>
    public const int LastBetFieldNumber = 7;
    private long lastBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBet {
      get { return lastBet_; }
      set {
        lastBet_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 8;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 9;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcFindMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcFindMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarkUnit != other.MarkUnit) return false;
      if (GameCode != other.GameCode) return false;
      if (WithNonOpen != other.WithNonOpen) return false;
      if (Create != other.Create) return false;
      if (MockCodeCard != other.MockCodeCard) return false;
      if (UserData != other.UserData) return false;
      if (LastBet != other.LastBet) return false;
      if (Password != other.Password) return false;
      if (TableId != other.TableId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarkUnit != 0) hash ^= MarkUnit.GetHashCode();
      if (GameCode.Length != 0) hash ^= GameCode.GetHashCode();
      if (WithNonOpen != false) hash ^= WithNonOpen.GetHashCode();
      if (Create != false) hash ^= Create.GetHashCode();
      if (MockCodeCard != 0) hash ^= MockCodeCard.GetHashCode();
      if (UserData.Length != 0) hash ^= UserData.GetHashCode();
      if (LastBet != 0L) hash ^= LastBet.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MarkUnit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MarkUnit);
      }
      if (GameCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameCode);
      }
      if (WithNonOpen != false) {
        output.WriteRawTag(24);
        output.WriteBool(WithNonOpen);
      }
      if (Create != false) {
        output.WriteRawTag(32);
        output.WriteBool(Create);
      }
      if (MockCodeCard != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MockCodeCard);
      }
      if (UserData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserData);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(LastBet);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Password);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TableId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MarkUnit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MarkUnit);
      }
      if (GameCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameCode);
      }
      if (WithNonOpen != false) {
        output.WriteRawTag(24);
        output.WriteBool(WithNonOpen);
      }
      if (Create != false) {
        output.WriteRawTag(32);
        output.WriteBool(Create);
      }
      if (MockCodeCard != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MockCodeCard);
      }
      if (UserData.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UserData);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(LastBet);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Password);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(TableId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarkUnit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarkUnit);
      }
      if (GameCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameCode);
      }
      if (WithNonOpen != false) {
        size += 1 + 1;
      }
      if (Create != false) {
        size += 1 + 1;
      }
      if (MockCodeCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MockCodeCard);
      }
      if (UserData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserData);
      }
      if (LastBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBet);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcFindMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.MarkUnit != 0) {
        MarkUnit = other.MarkUnit;
      }
      if (other.GameCode.Length != 0) {
        GameCode = other.GameCode;
      }
      if (other.WithNonOpen != false) {
        WithNonOpen = other.WithNonOpen;
      }
      if (other.Create != false) {
        Create = other.Create;
      }
      if (other.MockCodeCard != 0) {
        MockCodeCard = other.MockCodeCard;
      }
      if (other.UserData.Length != 0) {
        UserData = other.UserData;
      }
      if (other.LastBet != 0L) {
        LastBet = other.LastBet;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarkUnit = input.ReadInt32();
            break;
          }
          case 18: {
            GameCode = input.ReadString();
            break;
          }
          case 24: {
            WithNonOpen = input.ReadBool();
            break;
          }
          case 32: {
            Create = input.ReadBool();
            break;
          }
          case 40: {
            MockCodeCard = input.ReadInt32();
            break;
          }
          case 50: {
            UserData = input.ReadString();
            break;
          }
          case 56: {
            LastBet = input.ReadInt64();
            break;
          }
          case 66: {
            Password = input.ReadString();
            break;
          }
          case 74: {
            TableId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MarkUnit = input.ReadInt32();
            break;
          }
          case 18: {
            GameCode = input.ReadString();
            break;
          }
          case 24: {
            WithNonOpen = input.ReadBool();
            break;
          }
          case 32: {
            Create = input.ReadBool();
            break;
          }
          case 40: {
            MockCodeCard = input.ReadInt32();
            break;
          }
          case 50: {
            UserData = input.ReadString();
            break;
          }
          case 56: {
            LastBet = input.ReadInt64();
            break;
          }
          case 66: {
            Password = input.ReadString();
            break;
          }
          case 74: {
            TableId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Match : pb::IMessage<Match>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Match> _parser = new pb::MessageParser<Match>(() => new Match());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Match> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MatchApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match(Match other) : this() {
      matchId_ = other.matchId_;
      size_ = other.size_;
      maxSize_ = other.maxSize_;
      name_ = other.name_;
      markUnit_ = other.markUnit_;
      open_ = other.open_;
      mockCodeCard_ = other.mockCodeCard_;
      userData_ = other.userData_;
      lastBet_ = other.lastBet_;
      userCreated_ = other.userCreated_ != null ? other.userCreated_.Clone() : null;
      tableId_ = other.tableId_;
      numBot_ = other.numBot_;
      password_ = other.password_;
      profiles_ = other.profiles_.Clone();
      bet_ = other.bet_ != null ? other.bet_.Clone() : null;
      gameState_ = other.gameState_;
      playingPlayers_ = other.playingPlayers_.Clone();
      gameStateDuration_ = other.gameStateDuration_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Match Clone() {
      return new Match(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 2;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "max_size" field.</summary>
    public const int MaxSizeFieldNumber = 3;
    private int maxSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxSize {
      get { return maxSize_; }
      set {
        maxSize_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mark_unit" field.</summary>
    public const int MarkUnitFieldNumber = 5;
    private int markUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarkUnit {
      get { return markUnit_; }
      set {
        markUnit_ = value;
      }
    }

    /// <summary>Field number for the "open" field.</summary>
    public const int OpenFieldNumber = 6;
    private bool open_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Open {
      get { return open_; }
      set {
        open_ = value;
      }
    }

    /// <summary>Field number for the "mock_code_card" field.</summary>
    public const int MockCodeCardFieldNumber = 7;
    private int mockCodeCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MockCodeCard {
      get { return mockCodeCard_; }
      set {
        mockCodeCard_ = value;
      }
    }

    /// <summary>Field number for the "user_data" field.</summary>
    public const int UserDataFieldNumber = 8;
    private string userData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserData {
      get { return userData_; }
      set {
        userData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_bet" field.</summary>
    public const int LastBetFieldNumber = 9;
    private long lastBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBet {
      get { return lastBet_; }
      set {
        lastBet_ = value;
      }
    }

    /// <summary>Field number for the "user_created" field.</summary>
    public const int UserCreatedFieldNumber = 10;
    private global::Api.Profile userCreated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Profile UserCreated {
      get { return userCreated_; }
      set {
        userCreated_ = value;
      }
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 11;
    private string tableId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TableId {
      get { return tableId_; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_bot" field.</summary>
    public const int NumBotFieldNumber = 12;
    private int numBot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumBot {
      get { return numBot_; }
      set {
        numBot_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 13;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profiles" field.</summary>
    public const int ProfilesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Api.SimpleProfile> _repeated_profiles_codec
        = pb::FieldCodec.ForMessage(122, global::Api.SimpleProfile.Parser);
    private readonly pbc::RepeatedField<global::Api.SimpleProfile> profiles_ = new pbc::RepeatedField<global::Api.SimpleProfile>();
    /// <summary>
    /// repeated string players = 14;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.SimpleProfile> Profiles {
      get { return profiles_; }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 16;
    private global::Api.Bet bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Bet Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 17;
    private global::Api.GameState gameState_ = global::Api.GameState.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "playing_players" field.</summary>
    public const int PlayingPlayersFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_playingPlayers_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> playingPlayers_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PlayingPlayers {
      get { return playingPlayers_; }
    }

    /// <summary>Field number for the "game_state_duration" field.</summary>
    public const int GameStateDurationFieldNumber = 19;
    private static readonly pbc::MapField<int, int>.Codec _map_gameStateDuration_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForInt32(16, 0), 154);
    private readonly pbc::MapField<int, int> gameStateDuration_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> GameStateDuration {
      get { return gameStateDuration_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Match);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Match other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (Size != other.Size) return false;
      if (MaxSize != other.MaxSize) return false;
      if (Name != other.Name) return false;
      if (MarkUnit != other.MarkUnit) return false;
      if (Open != other.Open) return false;
      if (MockCodeCard != other.MockCodeCard) return false;
      if (UserData != other.UserData) return false;
      if (LastBet != other.LastBet) return false;
      if (!object.Equals(UserCreated, other.UserCreated)) return false;
      if (TableId != other.TableId) return false;
      if (NumBot != other.NumBot) return false;
      if (Password != other.Password) return false;
      if(!profiles_.Equals(other.profiles_)) return false;
      if (!object.Equals(Bet, other.Bet)) return false;
      if (GameState != other.GameState) return false;
      if(!playingPlayers_.Equals(other.playingPlayers_)) return false;
      if (!GameStateDuration.Equals(other.GameStateDuration)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (MaxSize != 0) hash ^= MaxSize.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (MarkUnit != 0) hash ^= MarkUnit.GetHashCode();
      if (Open != false) hash ^= Open.GetHashCode();
      if (MockCodeCard != 0) hash ^= MockCodeCard.GetHashCode();
      if (UserData.Length != 0) hash ^= UserData.GetHashCode();
      if (LastBet != 0L) hash ^= LastBet.GetHashCode();
      if (userCreated_ != null) hash ^= UserCreated.GetHashCode();
      if (TableId.Length != 0) hash ^= TableId.GetHashCode();
      if (NumBot != 0) hash ^= NumBot.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      hash ^= profiles_.GetHashCode();
      if (bet_ != null) hash ^= Bet.GetHashCode();
      if (GameState != global::Api.GameState.Unknown) hash ^= GameState.GetHashCode();
      hash ^= playingPlayers_.GetHashCode();
      hash ^= GameStateDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
      if (MaxSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxSize);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (MarkUnit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MarkUnit);
      }
      if (Open != false) {
        output.WriteRawTag(48);
        output.WriteBool(Open);
      }
      if (MockCodeCard != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MockCodeCard);
      }
      if (UserData.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UserData);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LastBet);
      }
      if (userCreated_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UserCreated);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TableId);
      }
      if (NumBot != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NumBot);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Password);
      }
      profiles_.WriteTo(output, _repeated_profiles_codec);
      if (bet_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Bet);
      }
      if (GameState != global::Api.GameState.Unknown) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) GameState);
      }
      playingPlayers_.WriteTo(output, _repeated_playingPlayers_codec);
      gameStateDuration_.WriteTo(output, _map_gameStateDuration_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (Size != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Size);
      }
      if (MaxSize != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxSize);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (MarkUnit != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MarkUnit);
      }
      if (Open != false) {
        output.WriteRawTag(48);
        output.WriteBool(Open);
      }
      if (MockCodeCard != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MockCodeCard);
      }
      if (UserData.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UserData);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LastBet);
      }
      if (userCreated_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UserCreated);
      }
      if (TableId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TableId);
      }
      if (NumBot != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(NumBot);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(Password);
      }
      profiles_.WriteTo(ref output, _repeated_profiles_codec);
      if (bet_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Bet);
      }
      if (GameState != global::Api.GameState.Unknown) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) GameState);
      }
      playingPlayers_.WriteTo(ref output, _repeated_playingPlayers_codec);
      gameStateDuration_.WriteTo(ref output, _map_gameStateDuration_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (MaxSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxSize);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (MarkUnit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarkUnit);
      }
      if (Open != false) {
        size += 1 + 1;
      }
      if (MockCodeCard != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MockCodeCard);
      }
      if (UserData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserData);
      }
      if (LastBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBet);
      }
      if (userCreated_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserCreated);
      }
      if (TableId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (NumBot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBot);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      size += profiles_.CalculateSize(_repeated_profiles_codec);
      if (bet_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bet);
      }
      if (GameState != global::Api.GameState.Unknown) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) GameState);
      }
      size += playingPlayers_.CalculateSize(_repeated_playingPlayers_codec);
      size += gameStateDuration_.CalculateSize(_map_gameStateDuration_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Match other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.MaxSize != 0) {
        MaxSize = other.MaxSize;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.MarkUnit != 0) {
        MarkUnit = other.MarkUnit;
      }
      if (other.Open != false) {
        Open = other.Open;
      }
      if (other.MockCodeCard != 0) {
        MockCodeCard = other.MockCodeCard;
      }
      if (other.UserData.Length != 0) {
        UserData = other.UserData;
      }
      if (other.LastBet != 0L) {
        LastBet = other.LastBet;
      }
      if (other.userCreated_ != null) {
        if (userCreated_ == null) {
          UserCreated = new global::Api.Profile();
        }
        UserCreated.MergeFrom(other.UserCreated);
      }
      if (other.TableId.Length != 0) {
        TableId = other.TableId;
      }
      if (other.NumBot != 0) {
        NumBot = other.NumBot;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      profiles_.Add(other.profiles_);
      if (other.bet_ != null) {
        if (bet_ == null) {
          Bet = new global::Api.Bet();
        }
        Bet.MergeFrom(other.Bet);
      }
      if (other.GameState != global::Api.GameState.Unknown) {
        GameState = other.GameState;
      }
      playingPlayers_.Add(other.playingPlayers_);
      gameStateDuration_.Add(other.gameStateDuration_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
          case 24: {
            MaxSize = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            MarkUnit = input.ReadInt32();
            break;
          }
          case 48: {
            Open = input.ReadBool();
            break;
          }
          case 56: {
            MockCodeCard = input.ReadInt32();
            break;
          }
          case 66: {
            UserData = input.ReadString();
            break;
          }
          case 72: {
            LastBet = input.ReadInt64();
            break;
          }
          case 82: {
            if (userCreated_ == null) {
              UserCreated = new global::Api.Profile();
            }
            input.ReadMessage(UserCreated);
            break;
          }
          case 90: {
            TableId = input.ReadString();
            break;
          }
          case 96: {
            NumBot = input.ReadInt32();
            break;
          }
          case 106: {
            Password = input.ReadString();
            break;
          }
          case 122: {
            profiles_.AddEntriesFrom(input, _repeated_profiles_codec);
            break;
          }
          case 130: {
            if (bet_ == null) {
              Bet = new global::Api.Bet();
            }
            input.ReadMessage(Bet);
            break;
          }
          case 136: {
            GameState = (global::Api.GameState) input.ReadEnum();
            break;
          }
          case 146: {
            playingPlayers_.AddEntriesFrom(input, _repeated_playingPlayers_codec);
            break;
          }
          case 154: {
            gameStateDuration_.AddEntriesFrom(input, _map_gameStateDuration_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            Size = input.ReadInt32();
            break;
          }
          case 24: {
            MaxSize = input.ReadInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            MarkUnit = input.ReadInt32();
            break;
          }
          case 48: {
            Open = input.ReadBool();
            break;
          }
          case 56: {
            MockCodeCard = input.ReadInt32();
            break;
          }
          case 66: {
            UserData = input.ReadString();
            break;
          }
          case 72: {
            LastBet = input.ReadInt64();
            break;
          }
          case 82: {
            if (userCreated_ == null) {
              UserCreated = new global::Api.Profile();
            }
            input.ReadMessage(UserCreated);
            break;
          }
          case 90: {
            TableId = input.ReadString();
            break;
          }
          case 96: {
            NumBot = input.ReadInt32();
            break;
          }
          case 106: {
            Password = input.ReadString();
            break;
          }
          case 122: {
            profiles_.AddEntriesFrom(ref input, _repeated_profiles_codec);
            break;
          }
          case 130: {
            if (bet_ == null) {
              Bet = new global::Api.Bet();
            }
            input.ReadMessage(Bet);
            break;
          }
          case 136: {
            GameState = (global::Api.GameState) input.ReadEnum();
            break;
          }
          case 146: {
            playingPlayers_.AddEntriesFrom(ref input, _repeated_playingPlayers_codec);
            break;
          }
          case 154: {
            gameStateDuration_.AddEntriesFrom(ref input, _map_gameStateDuration_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class MatchInfoRequest : pb::IMessage<MatchInfoRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MatchInfoRequest> _parser = new pb::MessageParser<MatchInfoRequest>(() => new MatchInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MatchApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchInfoRequest(MatchInfoRequest other) : this() {
      matchId_ = other.matchId_;
      queryUser_ = other.queryUser_;
      noCache_ = other.noCache_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchInfoRequest Clone() {
      return new MatchInfoRequest(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query_user" field.</summary>
    public const int QueryUserFieldNumber = 2;
    private bool queryUser_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool QueryUser {
      get { return queryUser_; }
      set {
        queryUser_ = value;
      }
    }

    /// <summary>Field number for the "no_cache" field.</summary>
    public const int NoCacheFieldNumber = 3;
    private bool noCache_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NoCache {
      get { return noCache_; }
      set {
        noCache_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      if (QueryUser != other.QueryUser) return false;
      if (NoCache != other.NoCache) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (QueryUser != false) hash ^= QueryUser.GetHashCode();
      if (NoCache != false) hash ^= NoCache.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (QueryUser != false) {
        output.WriteRawTag(16);
        output.WriteBool(QueryUser);
      }
      if (NoCache != false) {
        output.WriteRawTag(24);
        output.WriteBool(NoCache);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (QueryUser != false) {
        output.WriteRawTag(16);
        output.WriteBool(QueryUser);
      }
      if (NoCache != false) {
        output.WriteRawTag(24);
        output.WriteBool(NoCache);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (QueryUser != false) {
        size += 1 + 1;
      }
      if (NoCache != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      if (other.QueryUser != false) {
        QueryUser = other.QueryUser;
      }
      if (other.NoCache != false) {
        NoCache = other.NoCache;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            QueryUser = input.ReadBool();
            break;
          }
          case 24: {
            NoCache = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
          case 16: {
            QueryUser = input.ReadBool();
            break;
          }
          case 24: {
            NoCache = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Payload for an RPC response containing match IDs the user can join.
  /// </summary>
  public sealed partial class RpcFindMatchResponse : pb::IMessage<RpcFindMatchResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcFindMatchResponse> _parser = new pb::MessageParser<RpcFindMatchResponse>(() => new RpcFindMatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcFindMatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MatchApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcFindMatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcFindMatchResponse(RpcFindMatchResponse other) : this() {
      matches_ = other.matches_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcFindMatchResponse Clone() {
      return new RpcFindMatchResponse(this);
    }

    /// <summary>Field number for the "matches" field.</summary>
    public const int MatchesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Api.Match> _repeated_matches_codec
        = pb::FieldCodec.ForMessage(10, global::Api.Match.Parser);
    private readonly pbc::RepeatedField<global::Api.Match> matches_ = new pbc::RepeatedField<global::Api.Match>();
    /// <summary>
    /// One or more matches that fit the user's request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.Match> Matches {
      get { return matches_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcFindMatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcFindMatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!matches_.Equals(other.matches_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= matches_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      matches_.WriteTo(output, _repeated_matches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      matches_.WriteTo(ref output, _repeated_matches_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += matches_.CalculateSize(_repeated_matches_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcFindMatchResponse other) {
      if (other == null) {
        return;
      }
      matches_.Add(other.matches_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            matches_.AddEntriesFrom(input, _repeated_matches_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            matches_.AddEntriesFrom(ref input, _repeated_matches_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Payload for an RPC request to find a match.
  /// </summary>
  public sealed partial class RpcCreateMatchRequest : pb::IMessage<RpcCreateMatchRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcCreateMatchRequest> _parser = new pb::MessageParser<RpcCreateMatchRequest>(() => new RpcCreateMatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcCreateMatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MatchApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcCreateMatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcCreateMatchRequest(RpcCreateMatchRequest other) : this() {
      markUnit_ = other.markUnit_;
      gameCode_ = other.gameCode_;
      name_ = other.name_;
      password_ = other.password_;
      lastBet_ = other.lastBet_;
      maxSize_ = other.maxSize_;
      customData_ = other.customData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcCreateMatchRequest Clone() {
      return new RpcCreateMatchRequest(this);
    }

    /// <summary>Field number for the "mark_unit" field.</summary>
    public const int MarkUnitFieldNumber = 1;
    private int markUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarkUnit {
      get { return markUnit_; }
      set {
        markUnit_ = value;
      }
    }

    /// <summary>Field number for the "game_code" field.</summary>
    public const int GameCodeFieldNumber = 2;
    private string gameCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameCode {
      get { return gameCode_; }
      set {
        gameCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 4;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_bet" field.</summary>
    public const int LastBetFieldNumber = 5;
    private long lastBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastBet {
      get { return lastBet_; }
      set {
        lastBet_ = value;
      }
    }

    /// <summary>Field number for the "max_size" field.</summary>
    public const int MaxSizeFieldNumber = 6;
    private long maxSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxSize {
      get { return maxSize_; }
      set {
        maxSize_ = value;
      }
    }

    /// <summary>Field number for the "custom_data" field.</summary>
    public const int CustomDataFieldNumber = 7;
    private string customData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomData {
      get { return customData_; }
      set {
        customData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcCreateMatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcCreateMatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarkUnit != other.MarkUnit) return false;
      if (GameCode != other.GameCode) return false;
      if (Name != other.Name) return false;
      if (Password != other.Password) return false;
      if (LastBet != other.LastBet) return false;
      if (MaxSize != other.MaxSize) return false;
      if (CustomData != other.CustomData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarkUnit != 0) hash ^= MarkUnit.GetHashCode();
      if (GameCode.Length != 0) hash ^= GameCode.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (LastBet != 0L) hash ^= LastBet.GetHashCode();
      if (MaxSize != 0L) hash ^= MaxSize.GetHashCode();
      if (CustomData.Length != 0) hash ^= CustomData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MarkUnit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MarkUnit);
      }
      if (GameCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameCode);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastBet);
      }
      if (MaxSize != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxSize);
      }
      if (CustomData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CustomData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MarkUnit != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MarkUnit);
      }
      if (GameCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GameCode);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Password);
      }
      if (LastBet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastBet);
      }
      if (MaxSize != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MaxSize);
      }
      if (CustomData.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(CustomData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarkUnit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarkUnit);
      }
      if (GameCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameCode);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (LastBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastBet);
      }
      if (MaxSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxSize);
      }
      if (CustomData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcCreateMatchRequest other) {
      if (other == null) {
        return;
      }
      if (other.MarkUnit != 0) {
        MarkUnit = other.MarkUnit;
      }
      if (other.GameCode.Length != 0) {
        GameCode = other.GameCode;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.LastBet != 0L) {
        LastBet = other.LastBet;
      }
      if (other.MaxSize != 0L) {
        MaxSize = other.MaxSize;
      }
      if (other.CustomData.Length != 0) {
        CustomData = other.CustomData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarkUnit = input.ReadInt32();
            break;
          }
          case 18: {
            GameCode = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 40: {
            LastBet = input.ReadInt64();
            break;
          }
          case 48: {
            MaxSize = input.ReadInt64();
            break;
          }
          case 58: {
            CustomData = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MarkUnit = input.ReadInt32();
            break;
          }
          case 18: {
            GameCode = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Password = input.ReadString();
            break;
          }
          case 40: {
            LastBet = input.ReadInt64();
            break;
          }
          case 48: {
            MaxSize = input.ReadInt64();
            break;
          }
          case 58: {
            CustomData = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Payload for an RPC response containing match IDs the user can join.
  /// </summary>
  public sealed partial class RpcCreateMatchResponse : pb::IMessage<RpcCreateMatchResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RpcCreateMatchResponse> _parser = new pb::MessageParser<RpcCreateMatchResponse>(() => new RpcCreateMatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RpcCreateMatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MatchApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcCreateMatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcCreateMatchResponse(RpcCreateMatchResponse other) : this() {
      matchId_ = other.matchId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RpcCreateMatchResponse Clone() {
      return new RpcCreateMatchResponse(this);
    }

    /// <summary>Field number for the "match_id" field.</summary>
    public const int MatchIdFieldNumber = 1;
    private string matchId_ = "";
    /// <summary>
    /// One or more matches that fit the user's request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MatchId {
      get { return matchId_; }
      set {
        matchId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RpcCreateMatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RpcCreateMatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MatchId != other.MatchId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MatchId.Length != 0) hash ^= MatchId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MatchId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MatchId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MatchId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MatchId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RpcCreateMatchResponse other) {
      if (other == null) {
        return;
      }
      if (other.MatchId.Length != 0) {
        MatchId = other.MatchId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            MatchId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Bet : pb::IMessage<Bet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bet> _parser = new pb::MessageParser<Bet>(() => new Bet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MatchApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bet(Bet other) : this() {
      id_ = other.id_;
      enable_ = other.enable_;
      markUnit_ = other.markUnit_;
      gameId_ = other.gameId_;
      xJoin_ = other.xJoin_;
      agJoin_ = other.agJoin_;
      xPlayNow_ = other.xPlayNow_;
      agPlayNow_ = other.agPlayNow_;
      xLeave_ = other.xLeave_;
      agLeave_ = other.agLeave_;
      xFee_ = other.xFee_;
      agFee_ = other.agFee_;
      newFee_ = other.newFee_;
      countPlaying_ = other.countPlaying_;
      minVip_ = other.minVip_;
      maxVip_ = other.maxVip_;
      betDisableType_ = other.betDisableType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bet Clone() {
      return new Bet(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 2;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "mark_unit" field.</summary>
    public const int MarkUnitFieldNumber = 3;
    private float markUnit_;
    /// <summary>
    /// mức cược (chip)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MarkUnit {
      get { return markUnit_; }
      set {
        markUnit_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 4;
    private long gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "x_join" field.</summary>
    public const int XJoinFieldNumber = 5;
    private float xJoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XJoin {
      get { return xJoin_; }
      set {
        xJoin_ = value;
      }
    }

    /// <summary>Field number for the "ag_join" field.</summary>
    public const int AgJoinFieldNumber = 6;
    private long agJoin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AgJoin {
      get { return agJoin_; }
      set {
        agJoin_ = value;
      }
    }

    /// <summary>Field number for the "x_play_now" field.</summary>
    public const int XPlayNowFieldNumber = 7;
    private float xPlayNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XPlayNow {
      get { return xPlayNow_; }
      set {
        xPlayNow_ = value;
      }
    }

    /// <summary>Field number for the "ag_play_now" field.</summary>
    public const int AgPlayNowFieldNumber = 8;
    private long agPlayNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AgPlayNow {
      get { return agPlayNow_; }
      set {
        agPlayNow_ = value;
      }
    }

    /// <summary>Field number for the "x_leave" field.</summary>
    public const int XLeaveFieldNumber = 9;
    private float xLeave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XLeave {
      get { return xLeave_; }
      set {
        xLeave_ = value;
      }
    }

    /// <summary>Field number for the "ag_leave" field.</summary>
    public const int AgLeaveFieldNumber = 10;
    private long agLeave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AgLeave {
      get { return agLeave_; }
      set {
        agLeave_ = value;
      }
    }

    /// <summary>Field number for the "x_fee" field.</summary>
    public const int XFeeFieldNumber = 11;
    private float xFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XFee {
      get { return xFee_; }
      set {
        xFee_ = value;
      }
    }

    /// <summary>Field number for the "ag_fee" field.</summary>
    public const int AgFeeFieldNumber = 12;
    private long agFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AgFee {
      get { return agFee_; }
      set {
        agFee_ = value;
      }
    }

    /// <summary>Field number for the "new_fee" field.</summary>
    public const int NewFeeFieldNumber = 13;
    private float newFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NewFee {
      get { return newFee_; }
      set {
        newFee_ = value;
      }
    }

    /// <summary>Field number for the "count_playing" field.</summary>
    public const int CountPlayingFieldNumber = 14;
    private long countPlaying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CountPlaying {
      get { return countPlaying_; }
      set {
        countPlaying_ = value;
      }
    }

    /// <summary>Field number for the "min_vip" field.</summary>
    public const int MinVipFieldNumber = 15;
    private long minVip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinVip {
      get { return minVip_; }
      set {
        minVip_ = value;
      }
    }

    /// <summary>Field number for the "max_vip" field.</summary>
    public const int MaxVipFieldNumber = 16;
    private long maxVip_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxVip {
      get { return maxVip_; }
      set {
        maxVip_ = value;
      }
    }

    /// <summary>Field number for the "bet_disable_type" field.</summary>
    public const int BetDisableTypeFieldNumber = 17;
    private global::Api.BetDisableType betDisableType_ = global::Api.BetDisableType.Unspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.BetDisableType BetDisableType {
      get { return betDisableType_; }
      set {
        betDisableType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Enable != other.Enable) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MarkUnit, other.MarkUnit)) return false;
      if (GameId != other.GameId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XJoin, other.XJoin)) return false;
      if (AgJoin != other.AgJoin) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XPlayNow, other.XPlayNow)) return false;
      if (AgPlayNow != other.AgPlayNow) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XLeave, other.XLeave)) return false;
      if (AgLeave != other.AgLeave) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XFee, other.XFee)) return false;
      if (AgFee != other.AgFee) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NewFee, other.NewFee)) return false;
      if (CountPlaying != other.CountPlaying) return false;
      if (MinVip != other.MinVip) return false;
      if (MaxVip != other.MaxVip) return false;
      if (BetDisableType != other.BetDisableType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (MarkUnit != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MarkUnit);
      if (GameId != 0L) hash ^= GameId.GetHashCode();
      if (XJoin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XJoin);
      if (AgJoin != 0L) hash ^= AgJoin.GetHashCode();
      if (XPlayNow != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XPlayNow);
      if (AgPlayNow != 0L) hash ^= AgPlayNow.GetHashCode();
      if (XLeave != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XLeave);
      if (AgLeave != 0L) hash ^= AgLeave.GetHashCode();
      if (XFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XFee);
      if (AgFee != 0L) hash ^= AgFee.GetHashCode();
      if (NewFee != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NewFee);
      if (CountPlaying != 0L) hash ^= CountPlaying.GetHashCode();
      if (MinVip != 0L) hash ^= MinVip.GetHashCode();
      if (MaxVip != 0L) hash ^= MaxVip.GetHashCode();
      if (BetDisableType != global::Api.BetDisableType.Unspecified) hash ^= BetDisableType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (MarkUnit != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MarkUnit);
      }
      if (GameId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GameId);
      }
      if (XJoin != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(XJoin);
      }
      if (AgJoin != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AgJoin);
      }
      if (XPlayNow != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(XPlayNow);
      }
      if (AgPlayNow != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(AgPlayNow);
      }
      if (XLeave != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(XLeave);
      }
      if (AgLeave != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(AgLeave);
      }
      if (XFee != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(XFee);
      }
      if (AgFee != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AgFee);
      }
      if (NewFee != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(NewFee);
      }
      if (CountPlaying != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(CountPlaying);
      }
      if (MinVip != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(MinVip);
      }
      if (MaxVip != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(MaxVip);
      }
      if (BetDisableType != global::Api.BetDisableType.Unspecified) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) BetDisableType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Enable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Enable);
      }
      if (MarkUnit != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(MarkUnit);
      }
      if (GameId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(GameId);
      }
      if (XJoin != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(XJoin);
      }
      if (AgJoin != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AgJoin);
      }
      if (XPlayNow != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(XPlayNow);
      }
      if (AgPlayNow != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(AgPlayNow);
      }
      if (XLeave != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(XLeave);
      }
      if (AgLeave != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(AgLeave);
      }
      if (XFee != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(XFee);
      }
      if (AgFee != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AgFee);
      }
      if (NewFee != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(NewFee);
      }
      if (CountPlaying != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(CountPlaying);
      }
      if (MinVip != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(MinVip);
      }
      if (MaxVip != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(MaxVip);
      }
      if (BetDisableType != global::Api.BetDisableType.Unspecified) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) BetDisableType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Enable != false) {
        size += 1 + 1;
      }
      if (MarkUnit != 0F) {
        size += 1 + 4;
      }
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameId);
      }
      if (XJoin != 0F) {
        size += 1 + 4;
      }
      if (AgJoin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AgJoin);
      }
      if (XPlayNow != 0F) {
        size += 1 + 4;
      }
      if (AgPlayNow != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AgPlayNow);
      }
      if (XLeave != 0F) {
        size += 1 + 4;
      }
      if (AgLeave != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AgLeave);
      }
      if (XFee != 0F) {
        size += 1 + 4;
      }
      if (AgFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AgFee);
      }
      if (NewFee != 0F) {
        size += 1 + 4;
      }
      if (CountPlaying != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountPlaying);
      }
      if (MinVip != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinVip);
      }
      if (MaxVip != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(MaxVip);
      }
      if (BetDisableType != global::Api.BetDisableType.Unspecified) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) BetDisableType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bet other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.MarkUnit != 0F) {
        MarkUnit = other.MarkUnit;
      }
      if (other.GameId != 0L) {
        GameId = other.GameId;
      }
      if (other.XJoin != 0F) {
        XJoin = other.XJoin;
      }
      if (other.AgJoin != 0L) {
        AgJoin = other.AgJoin;
      }
      if (other.XPlayNow != 0F) {
        XPlayNow = other.XPlayNow;
      }
      if (other.AgPlayNow != 0L) {
        AgPlayNow = other.AgPlayNow;
      }
      if (other.XLeave != 0F) {
        XLeave = other.XLeave;
      }
      if (other.AgLeave != 0L) {
        AgLeave = other.AgLeave;
      }
      if (other.XFee != 0F) {
        XFee = other.XFee;
      }
      if (other.AgFee != 0L) {
        AgFee = other.AgFee;
      }
      if (other.NewFee != 0F) {
        NewFee = other.NewFee;
      }
      if (other.CountPlaying != 0L) {
        CountPlaying = other.CountPlaying;
      }
      if (other.MinVip != 0L) {
        MinVip = other.MinVip;
      }
      if (other.MaxVip != 0L) {
        MaxVip = other.MaxVip;
      }
      if (other.BetDisableType != global::Api.BetDisableType.Unspecified) {
        BetDisableType = other.BetDisableType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 29: {
            MarkUnit = input.ReadFloat();
            break;
          }
          case 32: {
            GameId = input.ReadInt64();
            break;
          }
          case 45: {
            XJoin = input.ReadFloat();
            break;
          }
          case 48: {
            AgJoin = input.ReadInt64();
            break;
          }
          case 61: {
            XPlayNow = input.ReadFloat();
            break;
          }
          case 64: {
            AgPlayNow = input.ReadInt64();
            break;
          }
          case 77: {
            XLeave = input.ReadFloat();
            break;
          }
          case 80: {
            AgLeave = input.ReadInt64();
            break;
          }
          case 93: {
            XFee = input.ReadFloat();
            break;
          }
          case 96: {
            AgFee = input.ReadInt64();
            break;
          }
          case 109: {
            NewFee = input.ReadFloat();
            break;
          }
          case 112: {
            CountPlaying = input.ReadInt64();
            break;
          }
          case 120: {
            MinVip = input.ReadInt64();
            break;
          }
          case 128: {
            MaxVip = input.ReadInt64();
            break;
          }
          case 136: {
            BetDisableType = (global::Api.BetDisableType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Enable = input.ReadBool();
            break;
          }
          case 29: {
            MarkUnit = input.ReadFloat();
            break;
          }
          case 32: {
            GameId = input.ReadInt64();
            break;
          }
          case 45: {
            XJoin = input.ReadFloat();
            break;
          }
          case 48: {
            AgJoin = input.ReadInt64();
            break;
          }
          case 61: {
            XPlayNow = input.ReadFloat();
            break;
          }
          case 64: {
            AgPlayNow = input.ReadInt64();
            break;
          }
          case 77: {
            XLeave = input.ReadFloat();
            break;
          }
          case 80: {
            AgLeave = input.ReadInt64();
            break;
          }
          case 93: {
            XFee = input.ReadFloat();
            break;
          }
          case 96: {
            AgFee = input.ReadInt64();
            break;
          }
          case 109: {
            NewFee = input.ReadFloat();
            break;
          }
          case 112: {
            CountPlaying = input.ReadInt64();
            break;
          }
          case 120: {
            MinVip = input.ReadInt64();
            break;
          }
          case 128: {
            MaxVip = input.ReadInt64();
            break;
          }
          case 136: {
            BetDisableType = (global::Api.BetDisableType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Bets : pb::IMessage<Bets>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Bets> _parser = new pb::MessageParser<Bets>(() => new Bets());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Bets> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MatchApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bets() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bets(Bets other) : this() {
      bets_ = other.bets_.Clone();
      total_ = other.total_;
      offset_ = other.offset_;
      limit_ = other.limit_;
      bestChoice_ = other.bestChoice_ != null ? other.bestChoice_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Bets Clone() {
      return new Bets(this);
    }

    /// <summary>Field number for the "bets" field.</summary>
    public const int Bets_FieldNumber = 1;
    private static readonly pb::FieldCodec<global::Api.Bet> _repeated_bets_codec
        = pb::FieldCodec.ForMessage(10, global::Api.Bet.Parser);
    private readonly pbc::RepeatedField<global::Api.Bet> bets_ = new pbc::RepeatedField<global::Api.Bet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Api.Bet> Bets_ {
      get { return bets_; }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 3;
    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 4;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "best_choice" field.</summary>
    public const int BestChoiceFieldNumber = 5;
    private global::Api.Bet bestChoice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Api.Bet BestChoice {
      get { return bestChoice_; }
      set {
        bestChoice_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Bets);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Bets other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bets_.Equals(other.bets_)) return false;
      if (Total != other.Total) return false;
      if (Offset != other.Offset) return false;
      if (Limit != other.Limit) return false;
      if (!object.Equals(BestChoice, other.BestChoice)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bets_.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (bestChoice_ != null) hash ^= BestChoice.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      bets_.WriteTo(output, _repeated_bets_codec);
      if (Total != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Total);
      }
      if (Offset != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Offset);
      }
      if (Limit != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Limit);
      }
      if (bestChoice_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BestChoice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      bets_.WriteTo(ref output, _repeated_bets_codec);
      if (Total != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Total);
      }
      if (Offset != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Offset);
      }
      if (Limit != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Limit);
      }
      if (bestChoice_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BestChoice);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bets_.CalculateSize(_repeated_bets_codec);
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (bestChoice_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BestChoice);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Bets other) {
      if (other == null) {
        return;
      }
      bets_.Add(other.bets_);
      if (other.Total != 0L) {
        Total = other.Total;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      if (other.bestChoice_ != null) {
        if (bestChoice_ == null) {
          BestChoice = new global::Api.Bet();
        }
        BestChoice.MergeFrom(other.BestChoice);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bets_.AddEntriesFrom(input, _repeated_bets_codec);
            break;
          }
          case 16: {
            Total = input.ReadInt64();
            break;
          }
          case 24: {
            Offset = input.ReadInt64();
            break;
          }
          case 32: {
            Limit = input.ReadInt64();
            break;
          }
          case 42: {
            if (bestChoice_ == null) {
              BestChoice = new global::Api.Bet();
            }
            input.ReadMessage(BestChoice);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            bets_.AddEntriesFrom(ref input, _repeated_bets_codec);
            break;
          }
          case 16: {
            Total = input.ReadInt64();
            break;
          }
          case 24: {
            Offset = input.ReadInt64();
            break;
          }
          case 32: {
            Limit = input.ReadInt64();
            break;
          }
          case 42: {
            if (bestChoice_ == null) {
              BestChoice = new global::Api.Bet();
            }
            input.ReadMessage(BestChoice);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BetRequest : pb::IMessage<BetRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BetRequest> _parser = new pb::MessageParser<BetRequest>(() => new BetRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BetRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Api.MatchApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetRequest(BetRequest other) : this() {
      gameId_ = other.gameId_;
      offset_ = other.offset_;
      limit_ = other.limit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BetRequest Clone() {
      return new BetRequest(this);
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 1;
    private long gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private long offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 3;
    private long limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BetRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BetRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GameId != other.GameId) return false;
      if (Offset != other.Offset) return false;
      if (Limit != other.Limit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GameId != 0L) hash ^= GameId.GetHashCode();
      if (Offset != 0L) hash ^= Offset.GetHashCode();
      if (Limit != 0L) hash ^= Limit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GameId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GameId);
      }
      if (Offset != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Offset);
      }
      if (Limit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GameId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(GameId);
      }
      if (Offset != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Offset);
      }
      if (Limit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Limit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GameId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameId);
      }
      if (Offset != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Offset);
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BetRequest other) {
      if (other == null) {
        return;
      }
      if (other.GameId != 0L) {
        GameId = other.GameId;
      }
      if (other.Offset != 0L) {
        Offset = other.Offset;
      }
      if (other.Limit != 0L) {
        Limit = other.Limit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GameId = input.ReadInt64();
            break;
          }
          case 16: {
            Offset = input.ReadInt64();
            break;
          }
          case 24: {
            Limit = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GameId = input.ReadInt64();
            break;
          }
          case 16: {
            Offset = input.ReadInt64();
            break;
          }
          case 24: {
            Limit = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
