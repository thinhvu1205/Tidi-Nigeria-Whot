// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: whot_game_api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Whot {

  /// <summary>Holder for reflection information generated from whot_game_api.proto</summary>
  public static partial class WhotGameApiReflection {

    #region Descriptor
    /// <summary>File descriptor for whot_game_api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WhotGameApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN3aG90X2dhbWVfYXBpLnByb3RvEgR3aG90IkIKBENhcmQSHAoEcmFuaxgB",
            "IAEoDjIOLndob3QuQ2FyZFJhbmsSHAoEc3VpdBgCIAEoDjIOLndob3QuQ2Fy",
            "ZFN1aXQiJQoITGlzdENhcmQSGQoFY2FyZHMYASADKAsyCi53aG90LkNhcmQi",
            "MAoKVXBkYXRlVHVybhIPCgd1c2VyX2lkGAEgASgJEhEKCWNvdW50ZG93bhgC",
            "IAEoAyIJCgdOZXdHYW1lIqcCCgtVcGRhdGVUYWJsZRIdCgdwbGF5ZXJzGAEg",
            "AygLMgwud2hvdC5QbGF5ZXISJQoPcGxheWluZ19wbGF5ZXJzGAIgAygLMgwu",
            "d2hvdC5QbGF5ZXISIgoMam9pbl9wbGF5ZXJzGAMgAygLMgwud2hvdC5QbGF5",
            "ZXISIwoNbGVhdmVfcGxheWVycxgEIAMoCzIMLndob3QuUGxheWVyEgsKA2Jl",
            "dBgFIAEoAxILCgN2aXAYBiABKAMSEQoJdGltZV9wbGF5GAcgASgDEhMKC3Jl",
            "bWFpbl90aW1lGAggASgDEiMKCmdhbWVfc3RhdGUYCSABKA4yDy53aG90Lkdh",
            "bWVTdGF0ZRIiCgtqcF90cmVhc3VyZRgKIAEoCzINLndob3QuSmFja3BvdCI8",
            "Cg1QcmVzZW5jZUNhcmRzEhAKCHByZXNlbmNlGAEgASgJEhkKBWNhcmRzGAIg",
            "AygLMgoud2hvdC5DYXJkIs4BCgpVcGRhdGVEZWFsEioKDXByZXNlbmNlX2Nh",
            "cmQYASABKAsyEy53aG90LlByZXNlbmNlQ2FyZHMSMwoKY2FyZF9ldmVudBgC",
            "IAMoCzIfLndob3QuVXBkYXRlRGVhbC5DYXJkRXZlbnRFbnRyeRIcCgh0b3Bf",
            "Y2FyZBgDIAEoCzIKLndob3QuQ2FyZBpBCg5DYXJkRXZlbnRFbnRyeRILCgNr",
            "ZXkYASABKAkSHgoFdmFsdWUYAiABKA4yDy53aG90LkNhcmRFdmVudDoCOAEi",
            "cQoPVXBkYXRlR2FtZVN0YXRlEh4KBXN0YXRlGAEgASgOMg8ud2hvdC5HYW1l",
            "U3RhdGUSEgoKY291bnRfZG93bhgCIAEoAxIqCg1wcmVzZW5jZUNhcmRzGAMg",
            "AygLMhMud2hvdC5QcmVzZW5jZUNhcmRzIvIBCg9VcGRhdGVDYXJkU3RhdGUS",
            "DwoHdXNlcl9pZBgBIAEoCRIeCgVldmVudBgCIAEoDjIPLndob3QuQ2FyZEV2",
            "ZW50Eh8KC3BsYXllZF9jYXJkGAMgASgLMgoud2hvdC5DYXJkEhwKCHRvcF9j",
            "YXJkGAQgASgLMgoud2hvdC5DYXJkEh8KC2NhcmRzX2FmdGVyGAUgAygLMgou",
            "d2hvdC5DYXJkEiAKBmVmZmVjdBgGIAEoDjIQLndob3QuQ2FyZEVmZmVjdBIU",
            "CgxwaWNrX3BlbmFsdHkYByABKAUSFgoOdGFyZ2V0X3VzZXJfaWQYCCABKAki",
            "ZwoPV2hvdFNjb3JlUmVzdWx0EhQKDHRvdGFsX3BvaW50cxgBIAEoAxIXCg9y",
            "ZW1haW5pbmdfY2FyZHMYAiABKAUSEQoJaXNfd2lubmVyGAMgASgIEhIKCndp",
            "bl9mYWN0b3IYBCABKAEibgoQV2hvdFBsYXllclJlc3VsdBIPCgd1c2VyX2lk",
            "GAEgASgJEiQKBXNjb3JlGAIgASgLMhUud2hvdC5XaG90U2NvcmVSZXN1bHQS",
            "IwoPcmVtYWluaW5nX2NhcmRzGAMgAygLMgoud2hvdC5DYXJkIrsBCgxVcGRh",
            "dGVGaW5pc2gSJwoHcmVzdWx0cxgBIAMoCzIWLndob3QuV2hvdFBsYXllclJl",
            "c3VsdBIrCgplbmRfcmVhc29uGAIgASgOMhcud2hvdC5XaG90RW5kR2FtZVJl",
            "YXNvbhIRCgl3aW5uZXJfaWQYAyABKAkSHgoHamFja3BvdBgEIAEoCzINLndo",
            "b3QuSmFja3BvdBIiCgtqcF90cmVhc3VyZRgFIAEoCzINLndob3QuSmFja3Bv",
            "dCLeAQoNQmFsYW5jZVVwZGF0ZRIPCgd1c2VyX2lkGAEgASgJEhoKEmFtb3Vu",
            "dF9jaGlwX2JlZm9yZRgCIAEoAxIbChNhbW91bnRfY2hpcF9jdXJyZW50GAMg",
            "ASgDEhcKD2Ftb3VudF9jaGlwX2FkZBgEIAEoAxIWCg5hbW91dF9jaGlwX2Jl",
            "dBgFIAEoAxIWCg5hbW91dF9jaGlwX2ZlZRgGIAEoAxIdChVhbW91dF9jaGlw",
            "X2FkZF9wcmVmZWUYByABKAMSGwoTdG90YWxfY2hpcF9pbl9tYXRjaBgIIAEo",
            "AyJVCg1CYWxhbmNlUmVzdWx0EiQKB3VwZGF0ZXMYASADKAsyEy53aG90LkJh",
            "bGFuY2VVcGRhdGUSHgoHamFja3BvdBgCIAEoCzINLndob3QuSmFja3BvdCKs",
            "AQoGUGxheWVyEgoKAmlkGAEgASgJEhEKCXVzZXJfbmFtZRgCIAEoCRIOCgZ3",
            "YWxsZXQYAyABKAkSEgoKaXNfcGxheWluZxgEIAEoCBIdCgVjYXJkcxgFIAEo",
            "CzIOLndob3QuTGlzdENhcmQSEQoJdmlwX2xldmVsGAYgASgDEhEKCWF2YXRh",
            "cl9pZBgHIAEoCRILCgNzaWQYCCABKAMSDQoFb3JkZXIYCSABKAUiYgoHSmFj",
            "a3BvdBIKCgJpZBgBIAEoAxIPCgd1c2VyX2lkGAIgASgJEhEKCWdhbWVfY29k",
            "ZRgDIAEoCRINCgVjaGlwcxgEIAEoAxIYChBjcmVhdGVfdGltZV91bml4GAUg",
            "ASgDIk8KEUhpdEphY2twb3RIaXN0b3J5EhEKCXVzZXJfbmFtZRgBIAEoCRIN",
            "CgVjaGlwcxgCIAEoAxIYChBjcmVhdGVfdGltZV91bml4GAMgASgDKnQKCENh",
            "cmRTdWl0EhQKEFNVSVRfVU5TUEVDSUZJRUQQABIPCgtTVUlUX0NJUkNMRRAB",
            "Eg4KClNVSVRfQ1JPU1MQAhINCglTVUlUX1NUQVIQAxIPCgtTVUlUX1NRVUFS",
            "RRAEEhEKDVNVSVRfVFJJQU5HTEUQBSrCAQoIQ2FyZFJhbmsSFAoQUkFOS19V",
            "TlNQRUNJRklFRBAAEgoKBlJBTktfMRABEgoKBlJBTktfMhACEgoKBlJBTktf",
            "MxADEgoKBlJBTktfNBAEEgoKBlJBTktfNRAFEgoKBlJBTktfNxAGEgoKBlJB",
            "TktfOBAHEgsKB1JBTktfMTAQCBILCgdSQU5LXzExEAkSCwoHUkFOS18xMhAK",
            "EgsKB1JBTktfMTMQCxILCgdSQU5LXzE0EAwSCwoHUkFOS18yMBAUKt0BCg1P",
            "cENvZGVSZXF1ZXN0EhYKEk9QQ09ERV9VTlNQRUNJRklFRBAAEhsKF09QQ09E",
            "RV9SRVFVRVNUX05FV19HQU1FEAESHQoZT1BDT0RFX1JFUVVFU1RfTEVBVkVf",
            "R0FNRRACEhwKGE9QQ09ERV9SRVFVRVNUX1BMQVlfQ0FSRBADEhwKGE9QQ09E",
            "RV9SRVFVRVNUX0RSQVdfQ0FSRBAEEhwKGE9QQ09ERV9SRVFVRVNUX0NBTExf",
            "V0hPVBAFEh4KGk9QQ09ERV9VU0VSX0lOVEVSQUNUX0NBUkRTEAYqoAMKDE9w",
            "Q29kZVVwZGF0ZRIdChlPUENPREVfVVBEQVRFX1VOU1BFQ0lGSUVEEAASFwoT",
            "T1BDT0RFX1VQREFURV9UQUJMRRABEhYKEk9QQ09ERV9VUERBVEVfREVBTBAC",
            "EhgKFE9QQ09ERV9VUERBVEVfRklOSVNIEAMSGgoWT1BDT0RFX1VQREFURV9S",
            "RUpFQ1RFRBAEEhwKGE9QQ09ERV9VUERBVEVfR0FNRV9TVEFURRAFEh0KGU9Q",
            "Q09ERV9VUERBVEVfQ0FSRF9QTEFZRUQQBhIdChlPUENPREVfVVBEQVRFX0RS",
            "QVdfUkVTVUxUEAcSIgoeT1BDT0RFX1VQREFURV9DQUxMX1dIT1RfUkVTVUxU",
            "EAgSFgoST1BDT0RFX1VQREFURV9UVVJOEAkSHAoYT1BDT0RFX1VQREFURV9D",
            "QVJEX1NUQVRFEAoSGAoUT1BDT0RFX1VQREFURV9XQUxMRVQQCxIdChlPUENP",
            "REVfS0lDS19PRkZfVEhFX1RBQkxFEAwSGwoXT1BDT0RFX1VQREFURV9VU0VS",
            "X0lORk8QDSqgAQoJR2FtZVN0YXRlEhQKEEdhbWVTdGF0ZVVua25vd24QABIR",
            "Cg1HYW1lU3RhdGVJZGxlEAESFQoRR2FtZVN0YXRlTWF0Y2hpbmcQAhIWChJH",
            "YW1lU3RhdGVQcmVwYXJpbmcQAxIRCg1HYW1lU3RhdGVQbGF5EAQSEwoPR2Ft",
            "ZVN0YXRlUmV3YXJkEAUSEwoPR2FtZVN0YXRlRmluaXNoEAYqMwoJQ2FyZEV2",
            "ZW50EggKBE5PTkUQABIICgRQTEFZEAESCAoERFJBVxACEggKBFBBU1MQAyqO",
            "AQoKQ2FyZEVmZmVjdBIPCgtFRkZFQ1RfTk9ORRAAEgsKB0hPTERfT04QARIM",
            "CghQSUNLX1RXTxACEg4KClBJQ0tfVEhSRUUQAxIOCgpTVVNQRU5TSU9OEAQS",
            "EgoOR0VORVJBTF9NQVJLRVQQBRIICgRXSE9UEAYSFgoSQ0hPSUNFX1NIQVBF",
            "X0dIT1NUEAcqQQoRV2hvdEVuZEdhbWVSZWFzb24SFQoRUkVBU09OX05PUk1B",
            "TF9XSU4QABIVChFSRUFTT05fREVDS19FTVBUWRABQjFaL2dpdGh1Yi5jb20v",
            "bmFrYW1hRnJhbWV3b3JrL3dob3QtbW9kdWxlL2FwaS93aG90YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Whot.CardSuit), typeof(global::Whot.CardRank), typeof(global::Whot.OpCodeRequest), typeof(global::Whot.OpCodeUpdate), typeof(global::Whot.GameState), typeof(global::Whot.CardEvent), typeof(global::Whot.CardEffect), typeof(global::Whot.WhotEndGameReason), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.Card), global::Whot.Card.Parser, new[]{ "Rank", "Suit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.ListCard), global::Whot.ListCard.Parser, new[]{ "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.UpdateTurn), global::Whot.UpdateTurn.Parser, new[]{ "UserId", "Countdown" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.NewGame), global::Whot.NewGame.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.UpdateTable), global::Whot.UpdateTable.Parser, new[]{ "Players", "PlayingPlayers", "JoinPlayers", "LeavePlayers", "Bet", "Vip", "TimePlay", "RemainTime", "GameState", "JpTreasure" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.PresenceCards), global::Whot.PresenceCards.Parser, new[]{ "Presence", "Cards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.UpdateDeal), global::Whot.UpdateDeal.Parser, new[]{ "PresenceCard", "CardEvent", "TopCard" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.UpdateGameState), global::Whot.UpdateGameState.Parser, new[]{ "State", "CountDown", "PresenceCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.UpdateCardState), global::Whot.UpdateCardState.Parser, new[]{ "UserId", "Event", "PlayedCard", "TopCard", "CardsAfter", "Effect", "PickPenalty", "TargetUserId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.WhotScoreResult), global::Whot.WhotScoreResult.Parser, new[]{ "TotalPoints", "RemainingCards", "IsWinner", "WinFactor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.WhotPlayerResult), global::Whot.WhotPlayerResult.Parser, new[]{ "UserId", "Score", "RemainingCards" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.UpdateFinish), global::Whot.UpdateFinish.Parser, new[]{ "Results", "EndReason", "WinnerId", "Jackpot", "JpTreasure" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.BalanceUpdate), global::Whot.BalanceUpdate.Parser, new[]{ "UserId", "AmountChipBefore", "AmountChipCurrent", "AmountChipAdd", "AmoutChipBet", "AmoutChipFee", "AmoutChipAddPrefee", "TotalChipInMatch" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.BalanceResult), global::Whot.BalanceResult.Parser, new[]{ "Updates", "Jackpot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.Player), global::Whot.Player.Parser, new[]{ "Id", "UserName", "Wallet", "IsPlaying", "Cards", "VipLevel", "AvatarId", "Sid", "Order" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.Jackpot), global::Whot.Jackpot.Parser, new[]{ "Id", "UserId", "GameCode", "Chips", "CreateTimeUnix" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Whot.HitJackpotHistory), global::Whot.HitJackpotHistory.Parser, new[]{ "UserName", "Chips", "CreateTimeUnix" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CardSuit {
    [pbr::OriginalName("SUIT_UNSPECIFIED")] SuitUnspecified = 0,
    [pbr::OriginalName("SUIT_CIRCLE")] SuitCircle = 1,
    [pbr::OriginalName("SUIT_CROSS")] SuitCross = 2,
    [pbr::OriginalName("SUIT_STAR")] SuitStar = 3,
    [pbr::OriginalName("SUIT_SQUARE")] SuitSquare = 4,
    [pbr::OriginalName("SUIT_TRIANGLE")] SuitTriangle = 5,
  }

  public enum CardRank {
    [pbr::OriginalName("RANK_UNSPECIFIED")] RankUnspecified = 0,
    [pbr::OriginalName("RANK_1")] Rank1 = 1,
    [pbr::OriginalName("RANK_2")] Rank2 = 2,
    [pbr::OriginalName("RANK_3")] Rank3 = 3,
    [pbr::OriginalName("RANK_4")] Rank4 = 4,
    [pbr::OriginalName("RANK_5")] Rank5 = 5,
    [pbr::OriginalName("RANK_7")] Rank7 = 6,
    [pbr::OriginalName("RANK_8")] Rank8 = 7,
    [pbr::OriginalName("RANK_10")] Rank10 = 8,
    [pbr::OriginalName("RANK_11")] Rank11 = 9,
    [pbr::OriginalName("RANK_12")] Rank12 = 10,
    [pbr::OriginalName("RANK_13")] Rank13 = 11,
    [pbr::OriginalName("RANK_14")] Rank14 = 12,
    [pbr::OriginalName("RANK_20")] Rank20 = 20,
  }

  public enum OpCodeRequest {
    [pbr::OriginalName("OPCODE_UNSPECIFIED")] OpcodeUnspecified = 0,
    /// <summary>
    /// New game round starting.
    /// </summary>
    [pbr::OriginalName("OPCODE_REQUEST_NEW_GAME")] NewGame = 1,
    [pbr::OriginalName("OPCODE_REQUEST_LEAVE_GAME")] LeaveGame = 2,
    /// <summary>
    /// client chơi 1 lá
    /// </summary>
    [pbr::OriginalName("OPCODE_REQUEST_PLAY_CARD")] PlayCard = 3,
    /// <summary>
    /// client yêu cầu rút bài
    /// </summary>
    [pbr::OriginalName("OPCODE_REQUEST_DRAW_CARD")] DrawCard = 4,
    /// <summary>
    /// nếu client đánh WHOT, call lựa chọn suit
    /// </summary>
    [pbr::OriginalName("OPCODE_REQUEST_CALL_WHOT")] CallWhot = 5,
    /// <summary>
    /// client tương tác với cards
    /// </summary>
    [pbr::OriginalName("OPCODE_USER_INTERACT_CARDS")] OpcodeUserInteractCards = 6,
  }

  public enum OpCodeUpdate {
    [pbr::OriginalName("OPCODE_UPDATE_UNSPECIFIED")] Unspecified = 0,
    /// <summary>
    /// message UpdateTable
    /// </summary>
    [pbr::OriginalName("OPCODE_UPDATE_TABLE")] Table = 1,
    /// <summary>
    /// message UpdateDeal
    /// </summary>
    [pbr::OriginalName("OPCODE_UPDATE_DEAL")] Deal = 2,
    /// <summary>
    /// message UpdateFinish
    /// </summary>
    [pbr::OriginalName("OPCODE_UPDATE_FINISH")] Finish = 3,
    [pbr::OriginalName("OPCODE_UPDATE_REJECTED")] Rejected = 4,
    [pbr::OriginalName("OPCODE_UPDATE_GAME_STATE")] GameState = 5,
    /// <summary>
    /// ai đó đã đánh bài
    /// </summary>
    [pbr::OriginalName("OPCODE_UPDATE_CARD_PLAYED")] CardPlayed = 6,
    /// <summary>
    /// kết quả rút bài (ai đó rút)
    /// </summary>
    [pbr::OriginalName("OPCODE_UPDATE_DRAW_RESULT")] DrawResult = 7,
    /// <summary>
    /// kết quả chọn suit sau khi đánh WHOT
    /// </summary>
    [pbr::OriginalName("OPCODE_UPDATE_CALL_WHOT_RESULT")] CallWhotResult = 8,
    /// <summary>
    /// thông báo tới lượt ai
    /// </summary>
    [pbr::OriginalName("OPCODE_UPDATE_TURN")] Turn = 9,
    [pbr::OriginalName("OPCODE_UPDATE_CARD_STATE")] CardState = 10,
    [pbr::OriginalName("OPCODE_UPDATE_WALLET")] Wallet = 11,
    [pbr::OriginalName("OPCODE_KICK_OFF_THE_TABLE")] OpcodeKickOffTheTable = 12,
    [pbr::OriginalName("OPCODE_UPDATE_USER_INFO")] UserInfo = 13,
  }

  public enum GameState {
    [pbr::OriginalName("GameStateUnknown")] Unknown = 0,
    [pbr::OriginalName("GameStateIdle")] Idle = 1,
    [pbr::OriginalName("GameStateMatching")] Matching = 2,
    [pbr::OriginalName("GameStatePreparing")] Preparing = 3,
    [pbr::OriginalName("GameStatePlay")] Play = 4,
    [pbr::OriginalName("GameStateReward")] Reward = 5,
    [pbr::OriginalName("GameStateFinish")] Finish = 6,
  }

  public enum CardEvent {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("PLAY")] Play = 1,
    [pbr::OriginalName("DRAW")] Draw = 2,
    [pbr::OriginalName("PASS")] Pass = 3,
  }

  public enum CardEffect {
    [pbr::OriginalName("EFFECT_NONE")] EffectNone = 0,
    [pbr::OriginalName("HOLD_ON")] HoldOn = 1,
    [pbr::OriginalName("PICK_TWO")] PickTwo = 2,
    [pbr::OriginalName("PICK_THREE")] PickThree = 3,
    [pbr::OriginalName("SUSPENSION")] Suspension = 4,
    [pbr::OriginalName("GENERAL_MARKET")] GeneralMarket = 5,
    [pbr::OriginalName("WHOT")] Whot = 6,
    [pbr::OriginalName("CHOICE_SHAPE_GHOST")] ChoiceShapeGhost = 7,
  }

  public enum WhotEndGameReason {
    [pbr::OriginalName("REASON_NORMAL_WIN")] ReasonNormalWin = 0,
    [pbr::OriginalName("REASON_DECK_EMPTY")] ReasonDeckEmpty = 1,
  }

  #endregion

  #region Messages
  public sealed partial class Card : pb::IMessage<Card>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Card> _parser = new pb::MessageParser<Card>(() => new Card());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Card> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card(Card other) : this() {
      rank_ = other.rank_;
      suit_ = other.suit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Card Clone() {
      return new Card(this);
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 1;
    private global::Whot.CardRank rank_ = global::Whot.CardRank.RankUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.CardRank Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "suit" field.</summary>
    public const int SuitFieldNumber = 2;
    private global::Whot.CardSuit suit_ = global::Whot.CardSuit.SuitUnspecified;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.CardSuit Suit {
      get { return suit_; }
      set {
        suit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Card);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Card other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rank != other.Rank) return false;
      if (Suit != other.Suit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rank != global::Whot.CardRank.RankUnspecified) hash ^= Rank.GetHashCode();
      if (Suit != global::Whot.CardSuit.SuitUnspecified) hash ^= Suit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Rank != global::Whot.CardRank.RankUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Rank);
      }
      if (Suit != global::Whot.CardSuit.SuitUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Suit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Rank != global::Whot.CardRank.RankUnspecified) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Rank);
      }
      if (Suit != global::Whot.CardSuit.SuitUnspecified) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Suit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rank != global::Whot.CardRank.RankUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rank);
      }
      if (Suit != global::Whot.CardSuit.SuitUnspecified) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Suit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Card other) {
      if (other == null) {
        return;
      }
      if (other.Rank != global::Whot.CardRank.RankUnspecified) {
        Rank = other.Rank;
      }
      if (other.Suit != global::Whot.CardSuit.SuitUnspecified) {
        Suit = other.Suit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rank = (global::Whot.CardRank) input.ReadEnum();
            break;
          }
          case 16: {
            Suit = (global::Whot.CardSuit) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Rank = (global::Whot.CardRank) input.ReadEnum();
            break;
          }
          case 16: {
            Suit = (global::Whot.CardSuit) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ListCard : pb::IMessage<ListCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ListCard> _parser = new pb::MessageParser<ListCard>(() => new ListCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCard(ListCard other) : this() {
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCard Clone() {
      return new ListCard(this);
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Whot.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(10, global::Whot.Card.Parser);
    private readonly pbc::RepeatedField<global::Whot.Card> cards_ = new pbc::RepeatedField<global::Whot.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCard other) {
      if (other == null) {
        return;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateTurn : pb::IMessage<UpdateTurn>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateTurn> _parser = new pb::MessageParser<UpdateTurn>(() => new UpdateTurn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTurn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTurn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTurn(UpdateTurn other) : this() {
      userId_ = other.userId_;
      countdown_ = other.countdown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTurn Clone() {
      return new UpdateTurn(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countdown" field.</summary>
    public const int CountdownFieldNumber = 2;
    private long countdown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Countdown {
      get { return countdown_; }
      set {
        countdown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTurn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTurn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Countdown != other.Countdown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Countdown != 0L) hash ^= Countdown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Countdown != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Countdown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Countdown != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Countdown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Countdown != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Countdown);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTurn other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Countdown != 0L) {
        Countdown = other.Countdown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            Countdown = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            Countdown = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Message data sent by client to server representing the cards was organize.
  /// </summary>
  public sealed partial class NewGame : pb::IMessage<NewGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<NewGame> _parser = new pb::MessageParser<NewGame>(() => new NewGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewGame(NewGame other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewGame Clone() {
      return new NewGame(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewGame other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateTable : pb::IMessage<UpdateTable>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateTable> _parser = new pb::MessageParser<UpdateTable>(() => new UpdateTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTable(UpdateTable other) : this() {
      players_ = other.players_.Clone();
      playingPlayers_ = other.playingPlayers_.Clone();
      joinPlayers_ = other.joinPlayers_.Clone();
      leavePlayers_ = other.leavePlayers_.Clone();
      bet_ = other.bet_;
      vip_ = other.vip_;
      timePlay_ = other.timePlay_;
      remainTime_ = other.remainTime_;
      gameState_ = other.gameState_;
      jpTreasure_ = other.jpTreasure_ != null ? other.jpTreasure_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTable Clone() {
      return new UpdateTable(this);
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Whot.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Whot.Player.Parser);
    private readonly pbc::RepeatedField<global::Whot.Player> players_ = new pbc::RepeatedField<global::Whot.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "playing_players" field.</summary>
    public const int PlayingPlayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Whot.Player> _repeated_playingPlayers_codec
        = pb::FieldCodec.ForMessage(18, global::Whot.Player.Parser);
    private readonly pbc::RepeatedField<global::Whot.Player> playingPlayers_ = new pbc::RepeatedField<global::Whot.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.Player> PlayingPlayers {
      get { return playingPlayers_; }
    }

    /// <summary>Field number for the "join_players" field.</summary>
    public const int JoinPlayersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Whot.Player> _repeated_joinPlayers_codec
        = pb::FieldCodec.ForMessage(26, global::Whot.Player.Parser);
    private readonly pbc::RepeatedField<global::Whot.Player> joinPlayers_ = new pbc::RepeatedField<global::Whot.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.Player> JoinPlayers {
      get { return joinPlayers_; }
    }

    /// <summary>Field number for the "leave_players" field.</summary>
    public const int LeavePlayersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Whot.Player> _repeated_leavePlayers_codec
        = pb::FieldCodec.ForMessage(34, global::Whot.Player.Parser);
    private readonly pbc::RepeatedField<global::Whot.Player> leavePlayers_ = new pbc::RepeatedField<global::Whot.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.Player> LeavePlayers {
      get { return leavePlayers_; }
    }

    /// <summary>Field number for the "bet" field.</summary>
    public const int BetFieldNumber = 5;
    private long bet_;
    /// <summary>
    /// chip bet info
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    /// <summary>Field number for the "vip" field.</summary>
    public const int VipFieldNumber = 6;
    private long vip_;
    /// <summary>
    /// min level vip require join room
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Vip {
      get { return vip_; }
      set {
        vip_ = value;
      }
    }

    /// <summary>Field number for the "time_play" field.</summary>
    public const int TimePlayFieldNumber = 7;
    private long timePlay_;
    /// <summary>
    /// timestamp play game
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimePlay {
      get { return timePlay_; }
      set {
        timePlay_ = value;
      }
    }

    /// <summary>Field number for the "remain_time" field.</summary>
    public const int RemainTimeFieldNumber = 8;
    private long remainTime_;
    /// <summary>
    /// remain time to end game
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemainTime {
      get { return remainTime_; }
      set {
        remainTime_ = value;
      }
    }

    /// <summary>Field number for the "game_state" field.</summary>
    public const int GameStateFieldNumber = 9;
    private global::Whot.GameState gameState_ = global::Whot.GameState.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.GameState GameState {
      get { return gameState_; }
      set {
        gameState_ = value;
      }
    }

    /// <summary>Field number for the "jp_treasure" field.</summary>
    public const int JpTreasureFieldNumber = 10;
    private global::Whot.Jackpot jpTreasure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.Jackpot JpTreasure {
      get { return jpTreasure_; }
      set {
        jpTreasure_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if(!playingPlayers_.Equals(other.playingPlayers_)) return false;
      if(!joinPlayers_.Equals(other.joinPlayers_)) return false;
      if(!leavePlayers_.Equals(other.leavePlayers_)) return false;
      if (Bet != other.Bet) return false;
      if (Vip != other.Vip) return false;
      if (TimePlay != other.TimePlay) return false;
      if (RemainTime != other.RemainTime) return false;
      if (GameState != other.GameState) return false;
      if (!object.Equals(JpTreasure, other.JpTreasure)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      hash ^= playingPlayers_.GetHashCode();
      hash ^= joinPlayers_.GetHashCode();
      hash ^= leavePlayers_.GetHashCode();
      if (Bet != 0L) hash ^= Bet.GetHashCode();
      if (Vip != 0L) hash ^= Vip.GetHashCode();
      if (TimePlay != 0L) hash ^= TimePlay.GetHashCode();
      if (RemainTime != 0L) hash ^= RemainTime.GetHashCode();
      if (GameState != global::Whot.GameState.Unknown) hash ^= GameState.GetHashCode();
      if (jpTreasure_ != null) hash ^= JpTreasure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      players_.WriteTo(output, _repeated_players_codec);
      playingPlayers_.WriteTo(output, _repeated_playingPlayers_codec);
      joinPlayers_.WriteTo(output, _repeated_joinPlayers_codec);
      leavePlayers_.WriteTo(output, _repeated_leavePlayers_codec);
      if (Bet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Bet);
      }
      if (Vip != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Vip);
      }
      if (TimePlay != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TimePlay);
      }
      if (RemainTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(RemainTime);
      }
      if (GameState != global::Whot.GameState.Unknown) {
        output.WriteRawTag(72);
        output.WriteEnum((int) GameState);
      }
      if (jpTreasure_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(JpTreasure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      players_.WriteTo(ref output, _repeated_players_codec);
      playingPlayers_.WriteTo(ref output, _repeated_playingPlayers_codec);
      joinPlayers_.WriteTo(ref output, _repeated_joinPlayers_codec);
      leavePlayers_.WriteTo(ref output, _repeated_leavePlayers_codec);
      if (Bet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Bet);
      }
      if (Vip != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Vip);
      }
      if (TimePlay != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TimePlay);
      }
      if (RemainTime != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(RemainTime);
      }
      if (GameState != global::Whot.GameState.Unknown) {
        output.WriteRawTag(72);
        output.WriteEnum((int) GameState);
      }
      if (jpTreasure_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(JpTreasure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      size += playingPlayers_.CalculateSize(_repeated_playingPlayers_codec);
      size += joinPlayers_.CalculateSize(_repeated_joinPlayers_codec);
      size += leavePlayers_.CalculateSize(_repeated_leavePlayers_codec);
      if (Bet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Bet);
      }
      if (Vip != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Vip);
      }
      if (TimePlay != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimePlay);
      }
      if (RemainTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemainTime);
      }
      if (GameState != global::Whot.GameState.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GameState);
      }
      if (jpTreasure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JpTreasure);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTable other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      playingPlayers_.Add(other.playingPlayers_);
      joinPlayers_.Add(other.joinPlayers_);
      leavePlayers_.Add(other.leavePlayers_);
      if (other.Bet != 0L) {
        Bet = other.Bet;
      }
      if (other.Vip != 0L) {
        Vip = other.Vip;
      }
      if (other.TimePlay != 0L) {
        TimePlay = other.TimePlay;
      }
      if (other.RemainTime != 0L) {
        RemainTime = other.RemainTime;
      }
      if (other.GameState != global::Whot.GameState.Unknown) {
        GameState = other.GameState;
      }
      if (other.jpTreasure_ != null) {
        if (jpTreasure_ == null) {
          JpTreasure = new global::Whot.Jackpot();
        }
        JpTreasure.MergeFrom(other.JpTreasure);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 18: {
            playingPlayers_.AddEntriesFrom(input, _repeated_playingPlayers_codec);
            break;
          }
          case 26: {
            joinPlayers_.AddEntriesFrom(input, _repeated_joinPlayers_codec);
            break;
          }
          case 34: {
            leavePlayers_.AddEntriesFrom(input, _repeated_leavePlayers_codec);
            break;
          }
          case 40: {
            Bet = input.ReadInt64();
            break;
          }
          case 48: {
            Vip = input.ReadInt64();
            break;
          }
          case 56: {
            TimePlay = input.ReadInt64();
            break;
          }
          case 64: {
            RemainTime = input.ReadInt64();
            break;
          }
          case 72: {
            GameState = (global::Whot.GameState) input.ReadEnum();
            break;
          }
          case 82: {
            if (jpTreasure_ == null) {
              JpTreasure = new global::Whot.Jackpot();
            }
            input.ReadMessage(JpTreasure);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            players_.AddEntriesFrom(ref input, _repeated_players_codec);
            break;
          }
          case 18: {
            playingPlayers_.AddEntriesFrom(ref input, _repeated_playingPlayers_codec);
            break;
          }
          case 26: {
            joinPlayers_.AddEntriesFrom(ref input, _repeated_joinPlayers_codec);
            break;
          }
          case 34: {
            leavePlayers_.AddEntriesFrom(ref input, _repeated_leavePlayers_codec);
            break;
          }
          case 40: {
            Bet = input.ReadInt64();
            break;
          }
          case 48: {
            Vip = input.ReadInt64();
            break;
          }
          case 56: {
            TimePlay = input.ReadInt64();
            break;
          }
          case 64: {
            RemainTime = input.ReadInt64();
            break;
          }
          case 72: {
            GameState = (global::Whot.GameState) input.ReadEnum();
            break;
          }
          case 82: {
            if (jpTreasure_ == null) {
              JpTreasure = new global::Whot.Jackpot();
            }
            input.ReadMessage(JpTreasure);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class PresenceCards : pb::IMessage<PresenceCards>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<PresenceCards> _parser = new pb::MessageParser<PresenceCards>(() => new PresenceCards());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PresenceCards> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceCards() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceCards(PresenceCards other) : this() {
      presence_ = other.presence_;
      cards_ = other.cards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PresenceCards Clone() {
      return new PresenceCards(this);
    }

    /// <summary>Field number for the "presence" field.</summary>
    public const int PresenceFieldNumber = 1;
    private string presence_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Presence {
      get { return presence_; }
      set {
        presence_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Whot.Card> _repeated_cards_codec
        = pb::FieldCodec.ForMessage(18, global::Whot.Card.Parser);
    private readonly pbc::RepeatedField<global::Whot.Card> cards_ = new pbc::RepeatedField<global::Whot.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.Card> Cards {
      get { return cards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PresenceCards);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PresenceCards other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Presence != other.Presence) return false;
      if(!cards_.Equals(other.cards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Presence.Length != 0) hash ^= Presence.GetHashCode();
      hash ^= cards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Presence.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Presence);
      }
      cards_.WriteTo(output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Presence.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Presence);
      }
      cards_.WriteTo(ref output, _repeated_cards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Presence.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Presence);
      }
      size += cards_.CalculateSize(_repeated_cards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PresenceCards other) {
      if (other == null) {
        return;
      }
      if (other.Presence.Length != 0) {
        Presence = other.Presence;
      }
      cards_.Add(other.cards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Presence = input.ReadString();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(input, _repeated_cards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Presence = input.ReadString();
            break;
          }
          case 18: {
            cards_.AddEntriesFrom(ref input, _repeated_cards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Complete game round with winner announcement.
  /// </summary>
  public sealed partial class UpdateDeal : pb::IMessage<UpdateDeal>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateDeal> _parser = new pb::MessageParser<UpdateDeal>(() => new UpdateDeal());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateDeal> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeal() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeal(UpdateDeal other) : this() {
      presenceCard_ = other.presenceCard_ != null ? other.presenceCard_.Clone() : null;
      cardEvent_ = other.cardEvent_.Clone();
      topCard_ = other.topCard_ != null ? other.topCard_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateDeal Clone() {
      return new UpdateDeal(this);
    }

    /// <summary>Field number for the "presence_card" field.</summary>
    public const int PresenceCardFieldNumber = 1;
    private global::Whot.PresenceCards presenceCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.PresenceCards PresenceCard {
      get { return presenceCard_; }
      set {
        presenceCard_ = value;
      }
    }

    /// <summary>Field number for the "card_event" field.</summary>
    public const int CardEventFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Whot.CardEvent>.Codec _map_cardEvent_codec
        = new pbc::MapField<string, global::Whot.CardEvent>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::Whot.CardEvent) x, global::Whot.CardEvent.None), 18);
    private readonly pbc::MapField<string, global::Whot.CardEvent> cardEvent_ = new pbc::MapField<string, global::Whot.CardEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Whot.CardEvent> CardEvent {
      get { return cardEvent_; }
    }

    /// <summary>Field number for the "top_card" field.</summary>
    public const int TopCardFieldNumber = 3;
    private global::Whot.Card topCard_;
    /// <summary>
    /// card on top of deck
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.Card TopCard {
      get { return topCard_; }
      set {
        topCard_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateDeal);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateDeal other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(PresenceCard, other.PresenceCard)) return false;
      if (!CardEvent.Equals(other.CardEvent)) return false;
      if (!object.Equals(TopCard, other.TopCard)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (presenceCard_ != null) hash ^= PresenceCard.GetHashCode();
      hash ^= CardEvent.GetHashCode();
      if (topCard_ != null) hash ^= TopCard.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (presenceCard_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PresenceCard);
      }
      cardEvent_.WriteTo(output, _map_cardEvent_codec);
      if (topCard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TopCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (presenceCard_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PresenceCard);
      }
      cardEvent_.WriteTo(ref output, _map_cardEvent_codec);
      if (topCard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TopCard);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (presenceCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PresenceCard);
      }
      size += cardEvent_.CalculateSize(_map_cardEvent_codec);
      if (topCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopCard);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateDeal other) {
      if (other == null) {
        return;
      }
      if (other.presenceCard_ != null) {
        if (presenceCard_ == null) {
          PresenceCard = new global::Whot.PresenceCards();
        }
        PresenceCard.MergeFrom(other.PresenceCard);
      }
      cardEvent_.Add(other.cardEvent_);
      if (other.topCard_ != null) {
        if (topCard_ == null) {
          TopCard = new global::Whot.Card();
        }
        TopCard.MergeFrom(other.TopCard);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (presenceCard_ == null) {
              PresenceCard = new global::Whot.PresenceCards();
            }
            input.ReadMessage(PresenceCard);
            break;
          }
          case 18: {
            cardEvent_.AddEntriesFrom(input, _map_cardEvent_codec);
            break;
          }
          case 26: {
            if (topCard_ == null) {
              TopCard = new global::Whot.Card();
            }
            input.ReadMessage(TopCard);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (presenceCard_ == null) {
              PresenceCard = new global::Whot.PresenceCards();
            }
            input.ReadMessage(PresenceCard);
            break;
          }
          case 18: {
            cardEvent_.AddEntriesFrom(ref input, _map_cardEvent_codec);
            break;
          }
          case 26: {
            if (topCard_ == null) {
              TopCard = new global::Whot.Card();
            }
            input.ReadMessage(TopCard);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateGameState : pb::IMessage<UpdateGameState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateGameState> _parser = new pb::MessageParser<UpdateGameState>(() => new UpdateGameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateGameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameState(UpdateGameState other) : this() {
      state_ = other.state_;
      countDown_ = other.countDown_;
      presenceCards_ = other.presenceCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateGameState Clone() {
      return new UpdateGameState(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Whot.GameState state_ = global::Whot.GameState.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.GameState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "count_down" field.</summary>
    public const int CountDownFieldNumber = 2;
    private long countDown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CountDown {
      get { return countDown_; }
      set {
        countDown_ = value;
      }
    }

    /// <summary>Field number for the "presenceCards" field.</summary>
    public const int PresenceCardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Whot.PresenceCards> _repeated_presenceCards_codec
        = pb::FieldCodec.ForMessage(26, global::Whot.PresenceCards.Parser);
    private readonly pbc::RepeatedField<global::Whot.PresenceCards> presenceCards_ = new pbc::RepeatedField<global::Whot.PresenceCards>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.PresenceCards> PresenceCards {
      get { return presenceCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateGameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateGameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (CountDown != other.CountDown) return false;
      if(!presenceCards_.Equals(other.presenceCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != global::Whot.GameState.Unknown) hash ^= State.GetHashCode();
      if (CountDown != 0L) hash ^= CountDown.GetHashCode();
      hash ^= presenceCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (State != global::Whot.GameState.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (CountDown != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CountDown);
      }
      presenceCards_.WriteTo(output, _repeated_presenceCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (State != global::Whot.GameState.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (CountDown != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CountDown);
      }
      presenceCards_.WriteTo(ref output, _repeated_presenceCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != global::Whot.GameState.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (CountDown != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CountDown);
      }
      size += presenceCards_.CalculateSize(_repeated_presenceCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateGameState other) {
      if (other == null) {
        return;
      }
      if (other.State != global::Whot.GameState.Unknown) {
        State = other.State;
      }
      if (other.CountDown != 0L) {
        CountDown = other.CountDown;
      }
      presenceCards_.Add(other.presenceCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Whot.GameState) input.ReadEnum();
            break;
          }
          case 16: {
            CountDown = input.ReadInt64();
            break;
          }
          case 26: {
            presenceCards_.AddEntriesFrom(input, _repeated_presenceCards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            State = (global::Whot.GameState) input.ReadEnum();
            break;
          }
          case 16: {
            CountDown = input.ReadInt64();
            break;
          }
          case 26: {
            presenceCards_.AddEntriesFrom(ref input, _repeated_presenceCards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateCardState : pb::IMessage<UpdateCardState>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateCardState> _parser = new pb::MessageParser<UpdateCardState>(() => new UpdateCardState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCardState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardState(UpdateCardState other) : this() {
      userId_ = other.userId_;
      event_ = other.event_;
      playedCard_ = other.playedCard_ != null ? other.playedCard_.Clone() : null;
      topCard_ = other.topCard_ != null ? other.topCard_.Clone() : null;
      cardsAfter_ = other.cardsAfter_.Clone();
      effect_ = other.effect_;
      pickPenalty_ = other.pickPenalty_;
      targetUserId_ = other.targetUserId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCardState Clone() {
      return new UpdateCardState(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private global::Whot.CardEvent event_ = global::Whot.CardEvent.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.CardEvent Event {
      get { return event_; }
      set {
        event_ = value;
      }
    }

    /// <summary>Field number for the "played_card" field.</summary>
    public const int PlayedCardFieldNumber = 3;
    private global::Whot.Card playedCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.Card PlayedCard {
      get { return playedCard_; }
      set {
        playedCard_ = value;
      }
    }

    /// <summary>Field number for the "top_card" field.</summary>
    public const int TopCardFieldNumber = 4;
    private global::Whot.Card topCard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.Card TopCard {
      get { return topCard_; }
      set {
        topCard_ = value;
      }
    }

    /// <summary>Field number for the "cards_after" field.</summary>
    public const int CardsAfterFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Whot.Card> _repeated_cardsAfter_codec
        = pb::FieldCodec.ForMessage(42, global::Whot.Card.Parser);
    private readonly pbc::RepeatedField<global::Whot.Card> cardsAfter_ = new pbc::RepeatedField<global::Whot.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.Card> CardsAfter {
      get { return cardsAfter_; }
    }

    /// <summary>Field number for the "effect" field.</summary>
    public const int EffectFieldNumber = 6;
    private global::Whot.CardEffect effect_ = global::Whot.CardEffect.EffectNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.CardEffect Effect {
      get { return effect_; }
      set {
        effect_ = value;
      }
    }

    /// <summary>Field number for the "pick_penalty" field.</summary>
    public const int PickPenaltyFieldNumber = 7;
    private int pickPenalty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PickPenalty {
      get { return pickPenalty_; }
      set {
        pickPenalty_ = value;
      }
    }

    /// <summary>Field number for the "target_user_id" field.</summary>
    public const int TargetUserIdFieldNumber = 8;
    private string targetUserId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetUserId {
      get { return targetUserId_; }
      set {
        targetUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCardState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCardState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Event != other.Event) return false;
      if (!object.Equals(PlayedCard, other.PlayedCard)) return false;
      if (!object.Equals(TopCard, other.TopCard)) return false;
      if(!cardsAfter_.Equals(other.cardsAfter_)) return false;
      if (Effect != other.Effect) return false;
      if (PickPenalty != other.PickPenalty) return false;
      if (TargetUserId != other.TargetUserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Event != global::Whot.CardEvent.None) hash ^= Event.GetHashCode();
      if (playedCard_ != null) hash ^= PlayedCard.GetHashCode();
      if (topCard_ != null) hash ^= TopCard.GetHashCode();
      hash ^= cardsAfter_.GetHashCode();
      if (Effect != global::Whot.CardEffect.EffectNone) hash ^= Effect.GetHashCode();
      if (PickPenalty != 0) hash ^= PickPenalty.GetHashCode();
      if (TargetUserId.Length != 0) hash ^= TargetUserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Event != global::Whot.CardEvent.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Event);
      }
      if (playedCard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayedCard);
      }
      if (topCard_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TopCard);
      }
      cardsAfter_.WriteTo(output, _repeated_cardsAfter_codec);
      if (Effect != global::Whot.CardEffect.EffectNone) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Effect);
      }
      if (PickPenalty != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PickPenalty);
      }
      if (TargetUserId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TargetUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Event != global::Whot.CardEvent.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Event);
      }
      if (playedCard_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayedCard);
      }
      if (topCard_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TopCard);
      }
      cardsAfter_.WriteTo(ref output, _repeated_cardsAfter_codec);
      if (Effect != global::Whot.CardEffect.EffectNone) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Effect);
      }
      if (PickPenalty != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PickPenalty);
      }
      if (TargetUserId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(TargetUserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Event != global::Whot.CardEvent.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Event);
      }
      if (playedCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayedCard);
      }
      if (topCard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TopCard);
      }
      size += cardsAfter_.CalculateSize(_repeated_cardsAfter_codec);
      if (Effect != global::Whot.CardEffect.EffectNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Effect);
      }
      if (PickPenalty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PickPenalty);
      }
      if (TargetUserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetUserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCardState other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Event != global::Whot.CardEvent.None) {
        Event = other.Event;
      }
      if (other.playedCard_ != null) {
        if (playedCard_ == null) {
          PlayedCard = new global::Whot.Card();
        }
        PlayedCard.MergeFrom(other.PlayedCard);
      }
      if (other.topCard_ != null) {
        if (topCard_ == null) {
          TopCard = new global::Whot.Card();
        }
        TopCard.MergeFrom(other.TopCard);
      }
      cardsAfter_.Add(other.cardsAfter_);
      if (other.Effect != global::Whot.CardEffect.EffectNone) {
        Effect = other.Effect;
      }
      if (other.PickPenalty != 0) {
        PickPenalty = other.PickPenalty;
      }
      if (other.TargetUserId.Length != 0) {
        TargetUserId = other.TargetUserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            Event = (global::Whot.CardEvent) input.ReadEnum();
            break;
          }
          case 26: {
            if (playedCard_ == null) {
              PlayedCard = new global::Whot.Card();
            }
            input.ReadMessage(PlayedCard);
            break;
          }
          case 34: {
            if (topCard_ == null) {
              TopCard = new global::Whot.Card();
            }
            input.ReadMessage(TopCard);
            break;
          }
          case 42: {
            cardsAfter_.AddEntriesFrom(input, _repeated_cardsAfter_codec);
            break;
          }
          case 48: {
            Effect = (global::Whot.CardEffect) input.ReadEnum();
            break;
          }
          case 56: {
            PickPenalty = input.ReadInt32();
            break;
          }
          case 66: {
            TargetUserId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            Event = (global::Whot.CardEvent) input.ReadEnum();
            break;
          }
          case 26: {
            if (playedCard_ == null) {
              PlayedCard = new global::Whot.Card();
            }
            input.ReadMessage(PlayedCard);
            break;
          }
          case 34: {
            if (topCard_ == null) {
              TopCard = new global::Whot.Card();
            }
            input.ReadMessage(TopCard);
            break;
          }
          case 42: {
            cardsAfter_.AddEntriesFrom(ref input, _repeated_cardsAfter_codec);
            break;
          }
          case 48: {
            Effect = (global::Whot.CardEffect) input.ReadEnum();
            break;
          }
          case 56: {
            PickPenalty = input.ReadInt32();
            break;
          }
          case 66: {
            TargetUserId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WhotScoreResult : pb::IMessage<WhotScoreResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WhotScoreResult> _parser = new pb::MessageParser<WhotScoreResult>(() => new WhotScoreResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhotScoreResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhotScoreResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhotScoreResult(WhotScoreResult other) : this() {
      totalPoints_ = other.totalPoints_;
      remainingCards_ = other.remainingCards_;
      isWinner_ = other.isWinner_;
      winFactor_ = other.winFactor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhotScoreResult Clone() {
      return new WhotScoreResult(this);
    }

    /// <summary>Field number for the "total_points" field.</summary>
    public const int TotalPointsFieldNumber = 1;
    private long totalPoints_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalPoints {
      get { return totalPoints_; }
      set {
        totalPoints_ = value;
      }
    }

    /// <summary>Field number for the "remaining_cards" field.</summary>
    public const int RemainingCardsFieldNumber = 2;
    private int remainingCards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RemainingCards {
      get { return remainingCards_; }
      set {
        remainingCards_ = value;
      }
    }

    /// <summary>Field number for the "is_winner" field.</summary>
    public const int IsWinnerFieldNumber = 3;
    private bool isWinner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWinner {
      get { return isWinner_; }
      set {
        isWinner_ = value;
      }
    }

    /// <summary>Field number for the "win_factor" field.</summary>
    public const int WinFactorFieldNumber = 4;
    private double winFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double WinFactor {
      get { return winFactor_; }
      set {
        winFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhotScoreResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhotScoreResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalPoints != other.TotalPoints) return false;
      if (RemainingCards != other.RemainingCards) return false;
      if (IsWinner != other.IsWinner) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(WinFactor, other.WinFactor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalPoints != 0L) hash ^= TotalPoints.GetHashCode();
      if (RemainingCards != 0) hash ^= RemainingCards.GetHashCode();
      if (IsWinner != false) hash ^= IsWinner.GetHashCode();
      if (WinFactor != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(WinFactor);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalPoints != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalPoints);
      }
      if (RemainingCards != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainingCards);
      }
      if (IsWinner != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsWinner);
      }
      if (WinFactor != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(WinFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalPoints != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalPoints);
      }
      if (RemainingCards != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RemainingCards);
      }
      if (IsWinner != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsWinner);
      }
      if (WinFactor != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(WinFactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalPoints != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalPoints);
      }
      if (RemainingCards != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RemainingCards);
      }
      if (IsWinner != false) {
        size += 1 + 1;
      }
      if (WinFactor != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhotScoreResult other) {
      if (other == null) {
        return;
      }
      if (other.TotalPoints != 0L) {
        TotalPoints = other.TotalPoints;
      }
      if (other.RemainingCards != 0) {
        RemainingCards = other.RemainingCards;
      }
      if (other.IsWinner != false) {
        IsWinner = other.IsWinner;
      }
      if (other.WinFactor != 0D) {
        WinFactor = other.WinFactor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalPoints = input.ReadInt64();
            break;
          }
          case 16: {
            RemainingCards = input.ReadInt32();
            break;
          }
          case 24: {
            IsWinner = input.ReadBool();
            break;
          }
          case 33: {
            WinFactor = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalPoints = input.ReadInt64();
            break;
          }
          case 16: {
            RemainingCards = input.ReadInt32();
            break;
          }
          case 24: {
            IsWinner = input.ReadBool();
            break;
          }
          case 33: {
            WinFactor = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WhotPlayerResult : pb::IMessage<WhotPlayerResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WhotPlayerResult> _parser = new pb::MessageParser<WhotPlayerResult>(() => new WhotPlayerResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhotPlayerResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhotPlayerResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhotPlayerResult(WhotPlayerResult other) : this() {
      userId_ = other.userId_;
      score_ = other.score_ != null ? other.score_.Clone() : null;
      remainingCards_ = other.remainingCards_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhotPlayerResult Clone() {
      return new WhotPlayerResult(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private global::Whot.WhotScoreResult score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.WhotScoreResult Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "remaining_cards" field.</summary>
    public const int RemainingCardsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Whot.Card> _repeated_remainingCards_codec
        = pb::FieldCodec.ForMessage(26, global::Whot.Card.Parser);
    private readonly pbc::RepeatedField<global::Whot.Card> remainingCards_ = new pbc::RepeatedField<global::Whot.Card>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.Card> RemainingCards {
      get { return remainingCards_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhotPlayerResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhotPlayerResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (!object.Equals(Score, other.Score)) return false;
      if(!remainingCards_.Equals(other.remainingCards_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (score_ != null) hash ^= Score.GetHashCode();
      hash ^= remainingCards_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (score_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Score);
      }
      remainingCards_.WriteTo(output, _repeated_remainingCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (score_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Score);
      }
      remainingCards_.WriteTo(ref output, _repeated_remainingCards_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (score_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Score);
      }
      size += remainingCards_.CalculateSize(_repeated_remainingCards_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhotPlayerResult other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.score_ != null) {
        if (score_ == null) {
          Score = new global::Whot.WhotScoreResult();
        }
        Score.MergeFrom(other.Score);
      }
      remainingCards_.Add(other.remainingCards_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            if (score_ == null) {
              Score = new global::Whot.WhotScoreResult();
            }
            input.ReadMessage(Score);
            break;
          }
          case 26: {
            remainingCards_.AddEntriesFrom(input, _repeated_remainingCards_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            if (score_ == null) {
              Score = new global::Whot.WhotScoreResult();
            }
            input.ReadMessage(Score);
            break;
          }
          case 26: {
            remainingCards_.AddEntriesFrom(ref input, _repeated_remainingCards_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class UpdateFinish : pb::IMessage<UpdateFinish>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<UpdateFinish> _parser = new pb::MessageParser<UpdateFinish>(() => new UpdateFinish());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateFinish> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFinish() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFinish(UpdateFinish other) : this() {
      results_ = other.results_.Clone();
      endReason_ = other.endReason_;
      winnerId_ = other.winnerId_;
      jackpot_ = other.jackpot_ != null ? other.jackpot_.Clone() : null;
      jpTreasure_ = other.jpTreasure_ != null ? other.jpTreasure_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateFinish Clone() {
      return new UpdateFinish(this);
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Whot.WhotPlayerResult> _repeated_results_codec
        = pb::FieldCodec.ForMessage(10, global::Whot.WhotPlayerResult.Parser);
    private readonly pbc::RepeatedField<global::Whot.WhotPlayerResult> results_ = new pbc::RepeatedField<global::Whot.WhotPlayerResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.WhotPlayerResult> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "end_reason" field.</summary>
    public const int EndReasonFieldNumber = 2;
    private global::Whot.WhotEndGameReason endReason_ = global::Whot.WhotEndGameReason.ReasonNormalWin;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.WhotEndGameReason EndReason {
      get { return endReason_; }
      set {
        endReason_ = value;
      }
    }

    /// <summary>Field number for the "winner_id" field.</summary>
    public const int WinnerIdFieldNumber = 3;
    private string winnerId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WinnerId {
      get { return winnerId_; }
      set {
        winnerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jackpot" field.</summary>
    public const int JackpotFieldNumber = 4;
    private global::Whot.Jackpot jackpot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.Jackpot Jackpot {
      get { return jackpot_; }
      set {
        jackpot_ = value;
      }
    }

    /// <summary>Field number for the "jp_treasure" field.</summary>
    public const int JpTreasureFieldNumber = 5;
    private global::Whot.Jackpot jpTreasure_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.Jackpot JpTreasure {
      get { return jpTreasure_; }
      set {
        jpTreasure_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateFinish);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateFinish other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!results_.Equals(other.results_)) return false;
      if (EndReason != other.EndReason) return false;
      if (WinnerId != other.WinnerId) return false;
      if (!object.Equals(Jackpot, other.Jackpot)) return false;
      if (!object.Equals(JpTreasure, other.JpTreasure)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= results_.GetHashCode();
      if (EndReason != global::Whot.WhotEndGameReason.ReasonNormalWin) hash ^= EndReason.GetHashCode();
      if (WinnerId.Length != 0) hash ^= WinnerId.GetHashCode();
      if (jackpot_ != null) hash ^= Jackpot.GetHashCode();
      if (jpTreasure_ != null) hash ^= JpTreasure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      results_.WriteTo(output, _repeated_results_codec);
      if (EndReason != global::Whot.WhotEndGameReason.ReasonNormalWin) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EndReason);
      }
      if (WinnerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WinnerId);
      }
      if (jackpot_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Jackpot);
      }
      if (jpTreasure_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(JpTreasure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      results_.WriteTo(ref output, _repeated_results_codec);
      if (EndReason != global::Whot.WhotEndGameReason.ReasonNormalWin) {
        output.WriteRawTag(16);
        output.WriteEnum((int) EndReason);
      }
      if (WinnerId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(WinnerId);
      }
      if (jackpot_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Jackpot);
      }
      if (jpTreasure_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(JpTreasure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += results_.CalculateSize(_repeated_results_codec);
      if (EndReason != global::Whot.WhotEndGameReason.ReasonNormalWin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EndReason);
      }
      if (WinnerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinnerId);
      }
      if (jackpot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Jackpot);
      }
      if (jpTreasure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(JpTreasure);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateFinish other) {
      if (other == null) {
        return;
      }
      results_.Add(other.results_);
      if (other.EndReason != global::Whot.WhotEndGameReason.ReasonNormalWin) {
        EndReason = other.EndReason;
      }
      if (other.WinnerId.Length != 0) {
        WinnerId = other.WinnerId;
      }
      if (other.jackpot_ != null) {
        if (jackpot_ == null) {
          Jackpot = new global::Whot.Jackpot();
        }
        Jackpot.MergeFrom(other.Jackpot);
      }
      if (other.jpTreasure_ != null) {
        if (jpTreasure_ == null) {
          JpTreasure = new global::Whot.Jackpot();
        }
        JpTreasure.MergeFrom(other.JpTreasure);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 16: {
            EndReason = (global::Whot.WhotEndGameReason) input.ReadEnum();
            break;
          }
          case 26: {
            WinnerId = input.ReadString();
            break;
          }
          case 34: {
            if (jackpot_ == null) {
              Jackpot = new global::Whot.Jackpot();
            }
            input.ReadMessage(Jackpot);
            break;
          }
          case 42: {
            if (jpTreasure_ == null) {
              JpTreasure = new global::Whot.Jackpot();
            }
            input.ReadMessage(JpTreasure);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            results_.AddEntriesFrom(ref input, _repeated_results_codec);
            break;
          }
          case 16: {
            EndReason = (global::Whot.WhotEndGameReason) input.ReadEnum();
            break;
          }
          case 26: {
            WinnerId = input.ReadString();
            break;
          }
          case 34: {
            if (jackpot_ == null) {
              Jackpot = new global::Whot.Jackpot();
            }
            input.ReadMessage(Jackpot);
            break;
          }
          case 42: {
            if (jpTreasure_ == null) {
              JpTreasure = new global::Whot.Jackpot();
            }
            input.ReadMessage(JpTreasure);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BalanceUpdate : pb::IMessage<BalanceUpdate>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BalanceUpdate> _parser = new pb::MessageParser<BalanceUpdate>(() => new BalanceUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BalanceUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceUpdate(BalanceUpdate other) : this() {
      userId_ = other.userId_;
      amountChipBefore_ = other.amountChipBefore_;
      amountChipCurrent_ = other.amountChipCurrent_;
      amountChipAdd_ = other.amountChipAdd_;
      amoutChipBet_ = other.amoutChipBet_;
      amoutChipFee_ = other.amoutChipFee_;
      amoutChipAddPrefee_ = other.amoutChipAddPrefee_;
      totalChipInMatch_ = other.totalChipInMatch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceUpdate Clone() {
      return new BalanceUpdate(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_chip_before" field.</summary>
    public const int AmountChipBeforeFieldNumber = 2;
    private long amountChipBefore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountChipBefore {
      get { return amountChipBefore_; }
      set {
        amountChipBefore_ = value;
      }
    }

    /// <summary>Field number for the "amount_chip_current" field.</summary>
    public const int AmountChipCurrentFieldNumber = 3;
    private long amountChipCurrent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountChipCurrent {
      get { return amountChipCurrent_; }
      set {
        amountChipCurrent_ = value;
      }
    }

    /// <summary>Field number for the "amount_chip_add" field.</summary>
    public const int AmountChipAddFieldNumber = 4;
    private long amountChipAdd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountChipAdd {
      get { return amountChipAdd_; }
      set {
        amountChipAdd_ = value;
      }
    }

    /// <summary>Field number for the "amout_chip_bet" field.</summary>
    public const int AmoutChipBetFieldNumber = 5;
    private long amoutChipBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmoutChipBet {
      get { return amoutChipBet_; }
      set {
        amoutChipBet_ = value;
      }
    }

    /// <summary>Field number for the "amout_chip_fee" field.</summary>
    public const int AmoutChipFeeFieldNumber = 6;
    private long amoutChipFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmoutChipFee {
      get { return amoutChipFee_; }
      set {
        amoutChipFee_ = value;
      }
    }

    /// <summary>Field number for the "amout_chip_add_prefee" field.</summary>
    public const int AmoutChipAddPrefeeFieldNumber = 7;
    private long amoutChipAddPrefee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmoutChipAddPrefee {
      get { return amoutChipAddPrefee_; }
      set {
        amoutChipAddPrefee_ = value;
      }
    }

    /// <summary>Field number for the "total_chip_in_match" field.</summary>
    public const int TotalChipInMatchFieldNumber = 8;
    private long totalChipInMatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalChipInMatch {
      get { return totalChipInMatch_; }
      set {
        totalChipInMatch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BalanceUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BalanceUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (AmountChipBefore != other.AmountChipBefore) return false;
      if (AmountChipCurrent != other.AmountChipCurrent) return false;
      if (AmountChipAdd != other.AmountChipAdd) return false;
      if (AmoutChipBet != other.AmoutChipBet) return false;
      if (AmoutChipFee != other.AmoutChipFee) return false;
      if (AmoutChipAddPrefee != other.AmoutChipAddPrefee) return false;
      if (TotalChipInMatch != other.TotalChipInMatch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (AmountChipBefore != 0L) hash ^= AmountChipBefore.GetHashCode();
      if (AmountChipCurrent != 0L) hash ^= AmountChipCurrent.GetHashCode();
      if (AmountChipAdd != 0L) hash ^= AmountChipAdd.GetHashCode();
      if (AmoutChipBet != 0L) hash ^= AmoutChipBet.GetHashCode();
      if (AmoutChipFee != 0L) hash ^= AmoutChipFee.GetHashCode();
      if (AmoutChipAddPrefee != 0L) hash ^= AmoutChipAddPrefee.GetHashCode();
      if (TotalChipInMatch != 0L) hash ^= TotalChipInMatch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (AmountChipBefore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmountChipBefore);
      }
      if (AmountChipCurrent != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountChipCurrent);
      }
      if (AmountChipAdd != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AmountChipAdd);
      }
      if (AmoutChipBet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AmoutChipBet);
      }
      if (AmoutChipFee != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AmoutChipFee);
      }
      if (AmoutChipAddPrefee != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(AmoutChipAddPrefee);
      }
      if (TotalChipInMatch != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TotalChipInMatch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (AmountChipBefore != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmountChipBefore);
      }
      if (AmountChipCurrent != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountChipCurrent);
      }
      if (AmountChipAdd != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AmountChipAdd);
      }
      if (AmoutChipBet != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AmoutChipBet);
      }
      if (AmoutChipFee != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AmoutChipFee);
      }
      if (AmoutChipAddPrefee != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(AmoutChipAddPrefee);
      }
      if (TotalChipInMatch != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TotalChipInMatch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (AmountChipBefore != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountChipBefore);
      }
      if (AmountChipCurrent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountChipCurrent);
      }
      if (AmountChipAdd != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountChipAdd);
      }
      if (AmoutChipBet != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmoutChipBet);
      }
      if (AmoutChipFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmoutChipFee);
      }
      if (AmoutChipAddPrefee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmoutChipAddPrefee);
      }
      if (TotalChipInMatch != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalChipInMatch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BalanceUpdate other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.AmountChipBefore != 0L) {
        AmountChipBefore = other.AmountChipBefore;
      }
      if (other.AmountChipCurrent != 0L) {
        AmountChipCurrent = other.AmountChipCurrent;
      }
      if (other.AmountChipAdd != 0L) {
        AmountChipAdd = other.AmountChipAdd;
      }
      if (other.AmoutChipBet != 0L) {
        AmoutChipBet = other.AmoutChipBet;
      }
      if (other.AmoutChipFee != 0L) {
        AmoutChipFee = other.AmoutChipFee;
      }
      if (other.AmoutChipAddPrefee != 0L) {
        AmoutChipAddPrefee = other.AmoutChipAddPrefee;
      }
      if (other.TotalChipInMatch != 0L) {
        TotalChipInMatch = other.TotalChipInMatch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            AmountChipBefore = input.ReadInt64();
            break;
          }
          case 24: {
            AmountChipCurrent = input.ReadInt64();
            break;
          }
          case 32: {
            AmountChipAdd = input.ReadInt64();
            break;
          }
          case 40: {
            AmoutChipBet = input.ReadInt64();
            break;
          }
          case 48: {
            AmoutChipFee = input.ReadInt64();
            break;
          }
          case 56: {
            AmoutChipAddPrefee = input.ReadInt64();
            break;
          }
          case 64: {
            TotalChipInMatch = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 16: {
            AmountChipBefore = input.ReadInt64();
            break;
          }
          case 24: {
            AmountChipCurrent = input.ReadInt64();
            break;
          }
          case 32: {
            AmountChipAdd = input.ReadInt64();
            break;
          }
          case 40: {
            AmoutChipBet = input.ReadInt64();
            break;
          }
          case 48: {
            AmoutChipFee = input.ReadInt64();
            break;
          }
          case 56: {
            AmoutChipAddPrefee = input.ReadInt64();
            break;
          }
          case 64: {
            TotalChipInMatch = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class BalanceResult : pb::IMessage<BalanceResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BalanceResult> _parser = new pb::MessageParser<BalanceResult>(() => new BalanceResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BalanceResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceResult(BalanceResult other) : this() {
      updates_ = other.updates_.Clone();
      jackpot_ = other.jackpot_ != null ? other.jackpot_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceResult Clone() {
      return new BalanceResult(this);
    }

    /// <summary>Field number for the "updates" field.</summary>
    public const int UpdatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Whot.BalanceUpdate> _repeated_updates_codec
        = pb::FieldCodec.ForMessage(10, global::Whot.BalanceUpdate.Parser);
    private readonly pbc::RepeatedField<global::Whot.BalanceUpdate> updates_ = new pbc::RepeatedField<global::Whot.BalanceUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Whot.BalanceUpdate> Updates {
      get { return updates_; }
    }

    /// <summary>Field number for the "jackpot" field.</summary>
    public const int JackpotFieldNumber = 2;
    private global::Whot.Jackpot jackpot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.Jackpot Jackpot {
      get { return jackpot_; }
      set {
        jackpot_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BalanceResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BalanceResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!updates_.Equals(other.updates_)) return false;
      if (!object.Equals(Jackpot, other.Jackpot)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= updates_.GetHashCode();
      if (jackpot_ != null) hash ^= Jackpot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      updates_.WriteTo(output, _repeated_updates_codec);
      if (jackpot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Jackpot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      updates_.WriteTo(ref output, _repeated_updates_codec);
      if (jackpot_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Jackpot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += updates_.CalculateSize(_repeated_updates_codec);
      if (jackpot_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Jackpot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BalanceResult other) {
      if (other == null) {
        return;
      }
      updates_.Add(other.updates_);
      if (other.jackpot_ != null) {
        if (jackpot_ == null) {
          Jackpot = new global::Whot.Jackpot();
        }
        Jackpot.MergeFrom(other.Jackpot);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            updates_.AddEntriesFrom(input, _repeated_updates_codec);
            break;
          }
          case 18: {
            if (jackpot_ == null) {
              Jackpot = new global::Whot.Jackpot();
            }
            input.ReadMessage(Jackpot);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            updates_.AddEntriesFrom(ref input, _repeated_updates_codec);
            break;
          }
          case 18: {
            if (jackpot_ == null) {
              Jackpot = new global::Whot.Jackpot();
            }
            input.ReadMessage(Jackpot);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Player : pb::IMessage<Player>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      id_ = other.id_;
      userName_ = other.userName_;
      wallet_ = other.wallet_;
      isPlaying_ = other.isPlaying_;
      cards_ = other.cards_ != null ? other.cards_.Clone() : null;
      vipLevel_ = other.vipLevel_;
      avatarId_ = other.avatarId_;
      sid_ = other.sid_;
      order_ = other.order_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wallet" field.</summary>
    public const int WalletFieldNumber = 3;
    private string wallet_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Wallet {
      get { return wallet_; }
      set {
        wallet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_playing" field.</summary>
    public const int IsPlayingFieldNumber = 4;
    private bool isPlaying_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPlaying {
      get { return isPlaying_; }
      set {
        isPlaying_ = value;
      }
    }

    /// <summary>Field number for the "cards" field.</summary>
    public const int CardsFieldNumber = 5;
    private global::Whot.ListCard cards_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Whot.ListCard Cards {
      get { return cards_; }
      set {
        cards_ = value;
      }
    }

    /// <summary>Field number for the "vip_level" field.</summary>
    public const int VipLevelFieldNumber = 6;
    private long vipLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VipLevel {
      get { return vipLevel_; }
      set {
        vipLevel_ = value;
      }
    }

    /// <summary>Field number for the "avatar_id" field.</summary>
    public const int AvatarIdFieldNumber = 7;
    private string avatarId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AvatarId {
      get { return avatarId_; }
      set {
        avatarId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sid" field.</summary>
    public const int SidFieldNumber = 8;
    private long sid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Sid {
      get { return sid_; }
      set {
        sid_ = value;
      }
    }

    /// <summary>Field number for the "order" field.</summary>
    public const int OrderFieldNumber = 9;
    private int order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserName != other.UserName) return false;
      if (Wallet != other.Wallet) return false;
      if (IsPlaying != other.IsPlaying) return false;
      if (!object.Equals(Cards, other.Cards)) return false;
      if (VipLevel != other.VipLevel) return false;
      if (AvatarId != other.AvatarId) return false;
      if (Sid != other.Sid) return false;
      if (Order != other.Order) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Wallet.Length != 0) hash ^= Wallet.GetHashCode();
      if (IsPlaying != false) hash ^= IsPlaying.GetHashCode();
      if (cards_ != null) hash ^= Cards.GetHashCode();
      if (VipLevel != 0L) hash ^= VipLevel.GetHashCode();
      if (AvatarId.Length != 0) hash ^= AvatarId.GetHashCode();
      if (Sid != 0L) hash ^= Sid.GetHashCode();
      if (Order != 0) hash ^= Order.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (Wallet.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Wallet);
      }
      if (IsPlaying != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsPlaying);
      }
      if (cards_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Cards);
      }
      if (VipLevel != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(VipLevel);
      }
      if (AvatarId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AvatarId);
      }
      if (Sid != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Sid);
      }
      if (Order != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Order);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (Wallet.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Wallet);
      }
      if (IsPlaying != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsPlaying);
      }
      if (cards_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Cards);
      }
      if (VipLevel != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(VipLevel);
      }
      if (AvatarId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(AvatarId);
      }
      if (Sid != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Sid);
      }
      if (Order != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Order);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Wallet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Wallet);
      }
      if (IsPlaying != false) {
        size += 1 + 1;
      }
      if (cards_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cards);
      }
      if (VipLevel != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VipLevel);
      }
      if (AvatarId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvatarId);
      }
      if (Sid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Sid);
      }
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Wallet.Length != 0) {
        Wallet = other.Wallet;
      }
      if (other.IsPlaying != false) {
        IsPlaying = other.IsPlaying;
      }
      if (other.cards_ != null) {
        if (cards_ == null) {
          Cards = new global::Whot.ListCard();
        }
        Cards.MergeFrom(other.Cards);
      }
      if (other.VipLevel != 0L) {
        VipLevel = other.VipLevel;
      }
      if (other.AvatarId.Length != 0) {
        AvatarId = other.AvatarId;
      }
      if (other.Sid != 0L) {
        Sid = other.Sid;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            Wallet = input.ReadString();
            break;
          }
          case 32: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 42: {
            if (cards_ == null) {
              Cards = new global::Whot.ListCard();
            }
            input.ReadMessage(Cards);
            break;
          }
          case 48: {
            VipLevel = input.ReadInt64();
            break;
          }
          case 58: {
            AvatarId = input.ReadString();
            break;
          }
          case 64: {
            Sid = input.ReadInt64();
            break;
          }
          case 72: {
            Order = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            Wallet = input.ReadString();
            break;
          }
          case 32: {
            IsPlaying = input.ReadBool();
            break;
          }
          case 42: {
            if (cards_ == null) {
              Cards = new global::Whot.ListCard();
            }
            input.ReadMessage(Cards);
            break;
          }
          case 48: {
            VipLevel = input.ReadInt64();
            break;
          }
          case 58: {
            AvatarId = input.ReadString();
            break;
          }
          case 64: {
            Sid = input.ReadInt64();
            break;
          }
          case 72: {
            Order = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Jackpot : pb::IMessage<Jackpot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Jackpot> _parser = new pb::MessageParser<Jackpot>(() => new Jackpot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Jackpot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jackpot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jackpot(Jackpot other) : this() {
      id_ = other.id_;
      userId_ = other.userId_;
      gameCode_ = other.gameCode_;
      chips_ = other.chips_;
      createTimeUnix_ = other.createTimeUnix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jackpot Clone() {
      return new Jackpot(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_code" field.</summary>
    public const int GameCodeFieldNumber = 3;
    private string gameCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameCode {
      get { return gameCode_; }
      set {
        gameCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 4;
    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    /// <summary>Field number for the "create_time_unix" field.</summary>
    public const int CreateTimeUnixFieldNumber = 5;
    private long createTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTimeUnix {
      get { return createTimeUnix_; }
      set {
        createTimeUnix_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Jackpot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Jackpot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UserId != other.UserId) return false;
      if (GameCode != other.GameCode) return false;
      if (Chips != other.Chips) return false;
      if (CreateTimeUnix != other.CreateTimeUnix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (GameCode.Length != 0) hash ^= GameCode.GetHashCode();
      if (Chips != 0L) hash ^= Chips.GetHashCode();
      if (CreateTimeUnix != 0L) hash ^= CreateTimeUnix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (GameCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameCode);
      }
      if (Chips != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Chips);
      }
      if (CreateTimeUnix != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreateTimeUnix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (GameCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameCode);
      }
      if (Chips != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Chips);
      }
      if (CreateTimeUnix != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CreateTimeUnix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (GameCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameCode);
      }
      if (Chips != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (CreateTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTimeUnix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Jackpot other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.GameCode.Length != 0) {
        GameCode = other.GameCode;
      }
      if (other.Chips != 0L) {
        Chips = other.Chips;
      }
      if (other.CreateTimeUnix != 0L) {
        CreateTimeUnix = other.CreateTimeUnix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            GameCode = input.ReadString();
            break;
          }
          case 32: {
            Chips = input.ReadInt64();
            break;
          }
          case 40: {
            CreateTimeUnix = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            GameCode = input.ReadString();
            break;
          }
          case 32: {
            Chips = input.ReadInt64();
            break;
          }
          case 40: {
            CreateTimeUnix = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class HitJackpotHistory : pb::IMessage<HitJackpotHistory>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HitJackpotHistory> _parser = new pb::MessageParser<HitJackpotHistory>(() => new HitJackpotHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HitJackpotHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Whot.WhotGameApiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitJackpotHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitJackpotHistory(HitJackpotHistory other) : this() {
      userName_ = other.userName_;
      chips_ = other.chips_;
      createTimeUnix_ = other.createTimeUnix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HitJackpotHistory Clone() {
      return new HitJackpotHistory(this);
    }

    /// <summary>Field number for the "user_name" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chips" field.</summary>
    public const int ChipsFieldNumber = 2;
    private long chips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Chips {
      get { return chips_; }
      set {
        chips_ = value;
      }
    }

    /// <summary>Field number for the "create_time_unix" field.</summary>
    public const int CreateTimeUnixFieldNumber = 3;
    private long createTimeUnix_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreateTimeUnix {
      get { return createTimeUnix_; }
      set {
        createTimeUnix_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HitJackpotHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HitJackpotHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserName != other.UserName) return false;
      if (Chips != other.Chips) return false;
      if (CreateTimeUnix != other.CreateTimeUnix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (Chips != 0L) hash ^= Chips.GetHashCode();
      if (CreateTimeUnix != 0L) hash ^= CreateTimeUnix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Chips != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (CreateTimeUnix != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreateTimeUnix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Chips != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Chips);
      }
      if (CreateTimeUnix != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreateTimeUnix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Chips != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Chips);
      }
      if (CreateTimeUnix != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateTimeUnix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HitJackpotHistory other) {
      if (other == null) {
        return;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.Chips != 0L) {
        Chips = other.Chips;
      }
      if (other.CreateTimeUnix != 0L) {
        CreateTimeUnix = other.CreateTimeUnix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 24: {
            CreateTimeUnix = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 16: {
            Chips = input.ReadInt64();
            break;
          }
          case 24: {
            CreateTimeUnix = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
